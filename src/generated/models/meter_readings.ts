
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `meter_readings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model meter_readings
 * 
 */
export type meter_readingsModel = runtime.Types.Result.DefaultSelection<Prisma.$meter_readingsPayload>

export type AggregateMeter_readings = {
  _count: Meter_readingsCountAggregateOutputType | null
  _avg: Meter_readingsAvgAggregateOutputType | null
  _sum: Meter_readingsSumAggregateOutputType | null
  _min: Meter_readingsMinAggregateOutputType | null
  _max: Meter_readingsMaxAggregateOutputType | null
}

export type Meter_readingsAvgAggregateOutputType = {
  id: number | null
  user_id: number | null
  reading_value: runtime.Decimal | null
}

export type Meter_readingsSumAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  reading_value: runtime.Decimal | null
}

export type Meter_readingsMinAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  reading_date: Date | null
  reading_value: runtime.Decimal | null
  image_url: string | null
}

export type Meter_readingsMaxAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  reading_date: Date | null
  reading_value: runtime.Decimal | null
  image_url: string | null
}

export type Meter_readingsCountAggregateOutputType = {
  id: number
  user_id: number
  reading_date: number
  reading_value: number
  image_url: number
  _all: number
}


export type Meter_readingsAvgAggregateInputType = {
  id?: true
  user_id?: true
  reading_value?: true
}

export type Meter_readingsSumAggregateInputType = {
  id?: true
  user_id?: true
  reading_value?: true
}

export type Meter_readingsMinAggregateInputType = {
  id?: true
  user_id?: true
  reading_date?: true
  reading_value?: true
  image_url?: true
}

export type Meter_readingsMaxAggregateInputType = {
  id?: true
  user_id?: true
  reading_date?: true
  reading_value?: true
  image_url?: true
}

export type Meter_readingsCountAggregateInputType = {
  id?: true
  user_id?: true
  reading_date?: true
  reading_value?: true
  image_url?: true
  _all?: true
}

export type Meter_readingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which meter_readings to aggregate.
   */
  where?: Prisma.meter_readingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of meter_readings to fetch.
   */
  orderBy?: Prisma.meter_readingsOrderByWithRelationInput | Prisma.meter_readingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.meter_readingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` meter_readings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` meter_readings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned meter_readings
  **/
  _count?: true | Meter_readingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Meter_readingsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Meter_readingsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Meter_readingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Meter_readingsMaxAggregateInputType
}

export type GetMeter_readingsAggregateType<T extends Meter_readingsAggregateArgs> = {
      [P in keyof T & keyof AggregateMeter_readings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMeter_readings[P]>
    : Prisma.GetScalarType<T[P], AggregateMeter_readings[P]>
}




export type meter_readingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.meter_readingsWhereInput
  orderBy?: Prisma.meter_readingsOrderByWithAggregationInput | Prisma.meter_readingsOrderByWithAggregationInput[]
  by: Prisma.Meter_readingsScalarFieldEnum[] | Prisma.Meter_readingsScalarFieldEnum
  having?: Prisma.meter_readingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Meter_readingsCountAggregateInputType | true
  _avg?: Meter_readingsAvgAggregateInputType
  _sum?: Meter_readingsSumAggregateInputType
  _min?: Meter_readingsMinAggregateInputType
  _max?: Meter_readingsMaxAggregateInputType
}

export type Meter_readingsGroupByOutputType = {
  id: bigint
  user_id: bigint
  reading_date: Date
  reading_value: runtime.Decimal
  image_url: string | null
  _count: Meter_readingsCountAggregateOutputType | null
  _avg: Meter_readingsAvgAggregateOutputType | null
  _sum: Meter_readingsSumAggregateOutputType | null
  _min: Meter_readingsMinAggregateOutputType | null
  _max: Meter_readingsMaxAggregateOutputType | null
}

type GetMeter_readingsGroupByPayload<T extends meter_readingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Meter_readingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Meter_readingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Meter_readingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Meter_readingsGroupByOutputType[P]>
      }
    >
  >



export type meter_readingsWhereInput = {
  AND?: Prisma.meter_readingsWhereInput | Prisma.meter_readingsWhereInput[]
  OR?: Prisma.meter_readingsWhereInput[]
  NOT?: Prisma.meter_readingsWhereInput | Prisma.meter_readingsWhereInput[]
  id?: Prisma.BigIntFilter<"meter_readings"> | bigint | number
  user_id?: Prisma.BigIntFilter<"meter_readings"> | bigint | number
  reading_date?: Prisma.DateTimeFilter<"meter_readings"> | Date | string
  reading_value?: Prisma.DecimalFilter<"meter_readings"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.StringNullableFilter<"meter_readings"> | string | null
  bills?: Prisma.BillsListRelationFilter
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}

export type meter_readingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  reading_date?: Prisma.SortOrder
  reading_value?: Prisma.SortOrder
  image_url?: Prisma.SortOrderInput | Prisma.SortOrder
  bills?: Prisma.billsOrderByRelationAggregateInput
  user?: Prisma.usersOrderByWithRelationInput
}

export type meter_readingsWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.meter_readingsWhereInput | Prisma.meter_readingsWhereInput[]
  OR?: Prisma.meter_readingsWhereInput[]
  NOT?: Prisma.meter_readingsWhereInput | Prisma.meter_readingsWhereInput[]
  user_id?: Prisma.BigIntFilter<"meter_readings"> | bigint | number
  reading_date?: Prisma.DateTimeFilter<"meter_readings"> | Date | string
  reading_value?: Prisma.DecimalFilter<"meter_readings"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.StringNullableFilter<"meter_readings"> | string | null
  bills?: Prisma.BillsListRelationFilter
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}, "id">

export type meter_readingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  reading_date?: Prisma.SortOrder
  reading_value?: Prisma.SortOrder
  image_url?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.meter_readingsCountOrderByAggregateInput
  _avg?: Prisma.meter_readingsAvgOrderByAggregateInput
  _max?: Prisma.meter_readingsMaxOrderByAggregateInput
  _min?: Prisma.meter_readingsMinOrderByAggregateInput
  _sum?: Prisma.meter_readingsSumOrderByAggregateInput
}

export type meter_readingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.meter_readingsScalarWhereWithAggregatesInput | Prisma.meter_readingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.meter_readingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.meter_readingsScalarWhereWithAggregatesInput | Prisma.meter_readingsScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"meter_readings"> | bigint | number
  user_id?: Prisma.BigIntWithAggregatesFilter<"meter_readings"> | bigint | number
  reading_date?: Prisma.DateTimeWithAggregatesFilter<"meter_readings"> | Date | string
  reading_value?: Prisma.DecimalWithAggregatesFilter<"meter_readings"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.StringNullableWithAggregatesFilter<"meter_readings"> | string | null
}

export type meter_readingsCreateInput = {
  id?: bigint | number
  reading_date: Date | string
  reading_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: string | null
  bills?: Prisma.billsCreateNestedManyWithoutMeter_readingInput
  user: Prisma.usersCreateNestedOneWithoutMeter_readingsInput
}

export type meter_readingsUncheckedCreateInput = {
  id?: bigint | number
  user_id: bigint | number
  reading_date: Date | string
  reading_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: string | null
  bills?: Prisma.billsUncheckedCreateNestedManyWithoutMeter_readingInput
}

export type meter_readingsUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bills?: Prisma.billsUpdateManyWithoutMeter_readingNestedInput
  user?: Prisma.usersUpdateOneRequiredWithoutMeter_readingsNestedInput
}

export type meter_readingsUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bills?: Prisma.billsUncheckedUpdateManyWithoutMeter_readingNestedInput
}

export type meter_readingsCreateManyInput = {
  id?: bigint | number
  user_id: bigint | number
  reading_date: Date | string
  reading_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: string | null
}

export type meter_readingsUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type meter_readingsUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type Meter_readingsListRelationFilter = {
  every?: Prisma.meter_readingsWhereInput
  some?: Prisma.meter_readingsWhereInput
  none?: Prisma.meter_readingsWhereInput
}

export type meter_readingsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type meter_readingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  reading_date?: Prisma.SortOrder
  reading_value?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
}

export type meter_readingsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  reading_value?: Prisma.SortOrder
}

export type meter_readingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  reading_date?: Prisma.SortOrder
  reading_value?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
}

export type meter_readingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  reading_date?: Prisma.SortOrder
  reading_value?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
}

export type meter_readingsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  reading_value?: Prisma.SortOrder
}

export type Meter_readingsScalarRelationFilter = {
  is?: Prisma.meter_readingsWhereInput
  isNot?: Prisma.meter_readingsWhereInput
}

export type meter_readingsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.meter_readingsCreateWithoutUserInput, Prisma.meter_readingsUncheckedCreateWithoutUserInput> | Prisma.meter_readingsCreateWithoutUserInput[] | Prisma.meter_readingsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.meter_readingsCreateOrConnectWithoutUserInput | Prisma.meter_readingsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.meter_readingsCreateManyUserInputEnvelope
  connect?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
}

export type meter_readingsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.meter_readingsCreateWithoutUserInput, Prisma.meter_readingsUncheckedCreateWithoutUserInput> | Prisma.meter_readingsCreateWithoutUserInput[] | Prisma.meter_readingsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.meter_readingsCreateOrConnectWithoutUserInput | Prisma.meter_readingsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.meter_readingsCreateManyUserInputEnvelope
  connect?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
}

export type meter_readingsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.meter_readingsCreateWithoutUserInput, Prisma.meter_readingsUncheckedCreateWithoutUserInput> | Prisma.meter_readingsCreateWithoutUserInput[] | Prisma.meter_readingsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.meter_readingsCreateOrConnectWithoutUserInput | Prisma.meter_readingsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.meter_readingsUpsertWithWhereUniqueWithoutUserInput | Prisma.meter_readingsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.meter_readingsCreateManyUserInputEnvelope
  set?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
  disconnect?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
  delete?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
  connect?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
  update?: Prisma.meter_readingsUpdateWithWhereUniqueWithoutUserInput | Prisma.meter_readingsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.meter_readingsUpdateManyWithWhereWithoutUserInput | Prisma.meter_readingsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.meter_readingsScalarWhereInput | Prisma.meter_readingsScalarWhereInput[]
}

export type meter_readingsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.meter_readingsCreateWithoutUserInput, Prisma.meter_readingsUncheckedCreateWithoutUserInput> | Prisma.meter_readingsCreateWithoutUserInput[] | Prisma.meter_readingsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.meter_readingsCreateOrConnectWithoutUserInput | Prisma.meter_readingsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.meter_readingsUpsertWithWhereUniqueWithoutUserInput | Prisma.meter_readingsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.meter_readingsCreateManyUserInputEnvelope
  set?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
  disconnect?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
  delete?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
  connect?: Prisma.meter_readingsWhereUniqueInput | Prisma.meter_readingsWhereUniqueInput[]
  update?: Prisma.meter_readingsUpdateWithWhereUniqueWithoutUserInput | Prisma.meter_readingsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.meter_readingsUpdateManyWithWhereWithoutUserInput | Prisma.meter_readingsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.meter_readingsScalarWhereInput | Prisma.meter_readingsScalarWhereInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type meter_readingsCreateNestedOneWithoutBillsInput = {
  create?: Prisma.XOR<Prisma.meter_readingsCreateWithoutBillsInput, Prisma.meter_readingsUncheckedCreateWithoutBillsInput>
  connectOrCreate?: Prisma.meter_readingsCreateOrConnectWithoutBillsInput
  connect?: Prisma.meter_readingsWhereUniqueInput
}

export type meter_readingsUpdateOneRequiredWithoutBillsNestedInput = {
  create?: Prisma.XOR<Prisma.meter_readingsCreateWithoutBillsInput, Prisma.meter_readingsUncheckedCreateWithoutBillsInput>
  connectOrCreate?: Prisma.meter_readingsCreateOrConnectWithoutBillsInput
  upsert?: Prisma.meter_readingsUpsertWithoutBillsInput
  connect?: Prisma.meter_readingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.meter_readingsUpdateToOneWithWhereWithoutBillsInput, Prisma.meter_readingsUpdateWithoutBillsInput>, Prisma.meter_readingsUncheckedUpdateWithoutBillsInput>
}

export type meter_readingsCreateWithoutUserInput = {
  id?: bigint | number
  reading_date: Date | string
  reading_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: string | null
  bills?: Prisma.billsCreateNestedManyWithoutMeter_readingInput
}

export type meter_readingsUncheckedCreateWithoutUserInput = {
  id?: bigint | number
  reading_date: Date | string
  reading_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: string | null
  bills?: Prisma.billsUncheckedCreateNestedManyWithoutMeter_readingInput
}

export type meter_readingsCreateOrConnectWithoutUserInput = {
  where: Prisma.meter_readingsWhereUniqueInput
  create: Prisma.XOR<Prisma.meter_readingsCreateWithoutUserInput, Prisma.meter_readingsUncheckedCreateWithoutUserInput>
}

export type meter_readingsCreateManyUserInputEnvelope = {
  data: Prisma.meter_readingsCreateManyUserInput | Prisma.meter_readingsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type meter_readingsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.meter_readingsWhereUniqueInput
  update: Prisma.XOR<Prisma.meter_readingsUpdateWithoutUserInput, Prisma.meter_readingsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.meter_readingsCreateWithoutUserInput, Prisma.meter_readingsUncheckedCreateWithoutUserInput>
}

export type meter_readingsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.meter_readingsWhereUniqueInput
  data: Prisma.XOR<Prisma.meter_readingsUpdateWithoutUserInput, Prisma.meter_readingsUncheckedUpdateWithoutUserInput>
}

export type meter_readingsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.meter_readingsScalarWhereInput
  data: Prisma.XOR<Prisma.meter_readingsUpdateManyMutationInput, Prisma.meter_readingsUncheckedUpdateManyWithoutUserInput>
}

export type meter_readingsScalarWhereInput = {
  AND?: Prisma.meter_readingsScalarWhereInput | Prisma.meter_readingsScalarWhereInput[]
  OR?: Prisma.meter_readingsScalarWhereInput[]
  NOT?: Prisma.meter_readingsScalarWhereInput | Prisma.meter_readingsScalarWhereInput[]
  id?: Prisma.BigIntFilter<"meter_readings"> | bigint | number
  user_id?: Prisma.BigIntFilter<"meter_readings"> | bigint | number
  reading_date?: Prisma.DateTimeFilter<"meter_readings"> | Date | string
  reading_value?: Prisma.DecimalFilter<"meter_readings"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.StringNullableFilter<"meter_readings"> | string | null
}

export type meter_readingsCreateWithoutBillsInput = {
  id?: bigint | number
  reading_date: Date | string
  reading_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: string | null
  user: Prisma.usersCreateNestedOneWithoutMeter_readingsInput
}

export type meter_readingsUncheckedCreateWithoutBillsInput = {
  id?: bigint | number
  user_id: bigint | number
  reading_date: Date | string
  reading_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: string | null
}

export type meter_readingsCreateOrConnectWithoutBillsInput = {
  where: Prisma.meter_readingsWhereUniqueInput
  create: Prisma.XOR<Prisma.meter_readingsCreateWithoutBillsInput, Prisma.meter_readingsUncheckedCreateWithoutBillsInput>
}

export type meter_readingsUpsertWithoutBillsInput = {
  update: Prisma.XOR<Prisma.meter_readingsUpdateWithoutBillsInput, Prisma.meter_readingsUncheckedUpdateWithoutBillsInput>
  create: Prisma.XOR<Prisma.meter_readingsCreateWithoutBillsInput, Prisma.meter_readingsUncheckedCreateWithoutBillsInput>
  where?: Prisma.meter_readingsWhereInput
}

export type meter_readingsUpdateToOneWithWhereWithoutBillsInput = {
  where?: Prisma.meter_readingsWhereInput
  data: Prisma.XOR<Prisma.meter_readingsUpdateWithoutBillsInput, Prisma.meter_readingsUncheckedUpdateWithoutBillsInput>
}

export type meter_readingsUpdateWithoutBillsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.usersUpdateOneRequiredWithoutMeter_readingsNestedInput
}

export type meter_readingsUncheckedUpdateWithoutBillsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type meter_readingsCreateManyUserInput = {
  id?: bigint | number
  reading_date: Date | string
  reading_value: runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: string | null
}

export type meter_readingsUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bills?: Prisma.billsUpdateManyWithoutMeter_readingNestedInput
}

export type meter_readingsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bills?: Prisma.billsUncheckedUpdateManyWithoutMeter_readingNestedInput
}

export type meter_readingsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  reading_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reading_value?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type Meter_readingsCountOutputType
 */

export type Meter_readingsCountOutputType = {
  bills: number
}

export type Meter_readingsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bills?: boolean | Meter_readingsCountOutputTypeCountBillsArgs
}

/**
 * Meter_readingsCountOutputType without action
 */
export type Meter_readingsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Meter_readingsCountOutputType
   */
  select?: Prisma.Meter_readingsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Meter_readingsCountOutputType without action
 */
export type Meter_readingsCountOutputTypeCountBillsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.billsWhereInput
}


export type meter_readingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  reading_date?: boolean
  reading_value?: boolean
  image_url?: boolean
  bills?: boolean | Prisma.meter_readings$billsArgs<ExtArgs>
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.Meter_readingsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meter_readings"]>

export type meter_readingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  reading_date?: boolean
  reading_value?: boolean
  image_url?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meter_readings"]>

export type meter_readingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  reading_date?: boolean
  reading_value?: boolean
  image_url?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meter_readings"]>

export type meter_readingsSelectScalar = {
  id?: boolean
  user_id?: boolean
  reading_date?: boolean
  reading_value?: boolean
  image_url?: boolean
}

export type meter_readingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "reading_date" | "reading_value" | "image_url", ExtArgs["result"]["meter_readings"]>
export type meter_readingsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bills?: boolean | Prisma.meter_readings$billsArgs<ExtArgs>
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.Meter_readingsCountOutputTypeDefaultArgs<ExtArgs>
}
export type meter_readingsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type meter_readingsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}

export type $meter_readingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "meter_readings"
  objects: {
    bills: Prisma.$billsPayload<ExtArgs>[]
    user: Prisma.$usersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    user_id: bigint
    reading_date: Date
    reading_value: runtime.Decimal
    image_url: string | null
  }, ExtArgs["result"]["meter_readings"]>
  composites: {}
}

export type meter_readingsGetPayload<S extends boolean | null | undefined | meter_readingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload, S>

export type meter_readingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<meter_readingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Meter_readingsCountAggregateInputType | true
  }

export interface meter_readingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['meter_readings'], meta: { name: 'meter_readings' } }
  /**
   * Find zero or one Meter_readings that matches the filter.
   * @param {meter_readingsFindUniqueArgs} args - Arguments to find a Meter_readings
   * @example
   * // Get one Meter_readings
   * const meter_readings = await prisma.meter_readings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends meter_readingsFindUniqueArgs>(args: Prisma.SelectSubset<T, meter_readingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Meter_readings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {meter_readingsFindUniqueOrThrowArgs} args - Arguments to find a Meter_readings
   * @example
   * // Get one Meter_readings
   * const meter_readings = await prisma.meter_readings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends meter_readingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, meter_readingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Meter_readings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {meter_readingsFindFirstArgs} args - Arguments to find a Meter_readings
   * @example
   * // Get one Meter_readings
   * const meter_readings = await prisma.meter_readings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends meter_readingsFindFirstArgs>(args?: Prisma.SelectSubset<T, meter_readingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Meter_readings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {meter_readingsFindFirstOrThrowArgs} args - Arguments to find a Meter_readings
   * @example
   * // Get one Meter_readings
   * const meter_readings = await prisma.meter_readings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends meter_readingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, meter_readingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Meter_readings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {meter_readingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Meter_readings
   * const meter_readings = await prisma.meter_readings.findMany()
   * 
   * // Get first 10 Meter_readings
   * const meter_readings = await prisma.meter_readings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const meter_readingsWithIdOnly = await prisma.meter_readings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends meter_readingsFindManyArgs>(args?: Prisma.SelectSubset<T, meter_readingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Meter_readings.
   * @param {meter_readingsCreateArgs} args - Arguments to create a Meter_readings.
   * @example
   * // Create one Meter_readings
   * const Meter_readings = await prisma.meter_readings.create({
   *   data: {
   *     // ... data to create a Meter_readings
   *   }
   * })
   * 
   */
  create<T extends meter_readingsCreateArgs>(args: Prisma.SelectSubset<T, meter_readingsCreateArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Meter_readings.
   * @param {meter_readingsCreateManyArgs} args - Arguments to create many Meter_readings.
   * @example
   * // Create many Meter_readings
   * const meter_readings = await prisma.meter_readings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends meter_readingsCreateManyArgs>(args?: Prisma.SelectSubset<T, meter_readingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Meter_readings and returns the data saved in the database.
   * @param {meter_readingsCreateManyAndReturnArgs} args - Arguments to create many Meter_readings.
   * @example
   * // Create many Meter_readings
   * const meter_readings = await prisma.meter_readings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Meter_readings and only return the `id`
   * const meter_readingsWithIdOnly = await prisma.meter_readings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends meter_readingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, meter_readingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Meter_readings.
   * @param {meter_readingsDeleteArgs} args - Arguments to delete one Meter_readings.
   * @example
   * // Delete one Meter_readings
   * const Meter_readings = await prisma.meter_readings.delete({
   *   where: {
   *     // ... filter to delete one Meter_readings
   *   }
   * })
   * 
   */
  delete<T extends meter_readingsDeleteArgs>(args: Prisma.SelectSubset<T, meter_readingsDeleteArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Meter_readings.
   * @param {meter_readingsUpdateArgs} args - Arguments to update one Meter_readings.
   * @example
   * // Update one Meter_readings
   * const meter_readings = await prisma.meter_readings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends meter_readingsUpdateArgs>(args: Prisma.SelectSubset<T, meter_readingsUpdateArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Meter_readings.
   * @param {meter_readingsDeleteManyArgs} args - Arguments to filter Meter_readings to delete.
   * @example
   * // Delete a few Meter_readings
   * const { count } = await prisma.meter_readings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends meter_readingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, meter_readingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Meter_readings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {meter_readingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Meter_readings
   * const meter_readings = await prisma.meter_readings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends meter_readingsUpdateManyArgs>(args: Prisma.SelectSubset<T, meter_readingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Meter_readings and returns the data updated in the database.
   * @param {meter_readingsUpdateManyAndReturnArgs} args - Arguments to update many Meter_readings.
   * @example
   * // Update many Meter_readings
   * const meter_readings = await prisma.meter_readings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Meter_readings and only return the `id`
   * const meter_readingsWithIdOnly = await prisma.meter_readings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends meter_readingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, meter_readingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Meter_readings.
   * @param {meter_readingsUpsertArgs} args - Arguments to update or create a Meter_readings.
   * @example
   * // Update or create a Meter_readings
   * const meter_readings = await prisma.meter_readings.upsert({
   *   create: {
   *     // ... data to create a Meter_readings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Meter_readings we want to update
   *   }
   * })
   */
  upsert<T extends meter_readingsUpsertArgs>(args: Prisma.SelectSubset<T, meter_readingsUpsertArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Meter_readings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {meter_readingsCountArgs} args - Arguments to filter Meter_readings to count.
   * @example
   * // Count the number of Meter_readings
   * const count = await prisma.meter_readings.count({
   *   where: {
   *     // ... the filter for the Meter_readings we want to count
   *   }
   * })
  **/
  count<T extends meter_readingsCountArgs>(
    args?: Prisma.Subset<T, meter_readingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Meter_readingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Meter_readings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Meter_readingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Meter_readingsAggregateArgs>(args: Prisma.Subset<T, Meter_readingsAggregateArgs>): Prisma.PrismaPromise<GetMeter_readingsAggregateType<T>>

  /**
   * Group by Meter_readings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {meter_readingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends meter_readingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: meter_readingsGroupByArgs['orderBy'] }
      : { orderBy?: meter_readingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, meter_readingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeter_readingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the meter_readings model
 */
readonly fields: meter_readingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for meter_readings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__meter_readingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  bills<T extends Prisma.meter_readings$billsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.meter_readings$billsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.usersDefaultArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the meter_readings model
 */
export interface meter_readingsFieldRefs {
  readonly id: Prisma.FieldRef<"meter_readings", 'BigInt'>
  readonly user_id: Prisma.FieldRef<"meter_readings", 'BigInt'>
  readonly reading_date: Prisma.FieldRef<"meter_readings", 'DateTime'>
  readonly reading_value: Prisma.FieldRef<"meter_readings", 'Decimal'>
  readonly image_url: Prisma.FieldRef<"meter_readings", 'String'>
}
    

// Custom InputTypes
/**
 * meter_readings findUnique
 */
export type meter_readingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * Filter, which meter_readings to fetch.
   */
  where: Prisma.meter_readingsWhereUniqueInput
}

/**
 * meter_readings findUniqueOrThrow
 */
export type meter_readingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * Filter, which meter_readings to fetch.
   */
  where: Prisma.meter_readingsWhereUniqueInput
}

/**
 * meter_readings findFirst
 */
export type meter_readingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * Filter, which meter_readings to fetch.
   */
  where?: Prisma.meter_readingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of meter_readings to fetch.
   */
  orderBy?: Prisma.meter_readingsOrderByWithRelationInput | Prisma.meter_readingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for meter_readings.
   */
  cursor?: Prisma.meter_readingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` meter_readings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` meter_readings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of meter_readings.
   */
  distinct?: Prisma.Meter_readingsScalarFieldEnum | Prisma.Meter_readingsScalarFieldEnum[]
}

/**
 * meter_readings findFirstOrThrow
 */
export type meter_readingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * Filter, which meter_readings to fetch.
   */
  where?: Prisma.meter_readingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of meter_readings to fetch.
   */
  orderBy?: Prisma.meter_readingsOrderByWithRelationInput | Prisma.meter_readingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for meter_readings.
   */
  cursor?: Prisma.meter_readingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` meter_readings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` meter_readings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of meter_readings.
   */
  distinct?: Prisma.Meter_readingsScalarFieldEnum | Prisma.Meter_readingsScalarFieldEnum[]
}

/**
 * meter_readings findMany
 */
export type meter_readingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * Filter, which meter_readings to fetch.
   */
  where?: Prisma.meter_readingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of meter_readings to fetch.
   */
  orderBy?: Prisma.meter_readingsOrderByWithRelationInput | Prisma.meter_readingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing meter_readings.
   */
  cursor?: Prisma.meter_readingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` meter_readings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` meter_readings.
   */
  skip?: number
  distinct?: Prisma.Meter_readingsScalarFieldEnum | Prisma.Meter_readingsScalarFieldEnum[]
}

/**
 * meter_readings create
 */
export type meter_readingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * The data needed to create a meter_readings.
   */
  data: Prisma.XOR<Prisma.meter_readingsCreateInput, Prisma.meter_readingsUncheckedCreateInput>
}

/**
 * meter_readings createMany
 */
export type meter_readingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many meter_readings.
   */
  data: Prisma.meter_readingsCreateManyInput | Prisma.meter_readingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * meter_readings createManyAndReturn
 */
export type meter_readingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * The data used to create many meter_readings.
   */
  data: Prisma.meter_readingsCreateManyInput | Prisma.meter_readingsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * meter_readings update
 */
export type meter_readingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * The data needed to update a meter_readings.
   */
  data: Prisma.XOR<Prisma.meter_readingsUpdateInput, Prisma.meter_readingsUncheckedUpdateInput>
  /**
   * Choose, which meter_readings to update.
   */
  where: Prisma.meter_readingsWhereUniqueInput
}

/**
 * meter_readings updateMany
 */
export type meter_readingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update meter_readings.
   */
  data: Prisma.XOR<Prisma.meter_readingsUpdateManyMutationInput, Prisma.meter_readingsUncheckedUpdateManyInput>
  /**
   * Filter which meter_readings to update
   */
  where?: Prisma.meter_readingsWhereInput
  /**
   * Limit how many meter_readings to update.
   */
  limit?: number
}

/**
 * meter_readings updateManyAndReturn
 */
export type meter_readingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * The data used to update meter_readings.
   */
  data: Prisma.XOR<Prisma.meter_readingsUpdateManyMutationInput, Prisma.meter_readingsUncheckedUpdateManyInput>
  /**
   * Filter which meter_readings to update
   */
  where?: Prisma.meter_readingsWhereInput
  /**
   * Limit how many meter_readings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * meter_readings upsert
 */
export type meter_readingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * The filter to search for the meter_readings to update in case it exists.
   */
  where: Prisma.meter_readingsWhereUniqueInput
  /**
   * In case the meter_readings found by the `where` argument doesn't exist, create a new meter_readings with this data.
   */
  create: Prisma.XOR<Prisma.meter_readingsCreateInput, Prisma.meter_readingsUncheckedCreateInput>
  /**
   * In case the meter_readings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.meter_readingsUpdateInput, Prisma.meter_readingsUncheckedUpdateInput>
}

/**
 * meter_readings delete
 */
export type meter_readingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
  /**
   * Filter which meter_readings to delete.
   */
  where: Prisma.meter_readingsWhereUniqueInput
}

/**
 * meter_readings deleteMany
 */
export type meter_readingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which meter_readings to delete
   */
  where?: Prisma.meter_readingsWhereInput
  /**
   * Limit how many meter_readings to delete.
   */
  limit?: number
}

/**
 * meter_readings.bills
 */
export type meter_readings$billsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  where?: Prisma.billsWhereInput
  orderBy?: Prisma.billsOrderByWithRelationInput | Prisma.billsOrderByWithRelationInput[]
  cursor?: Prisma.billsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BillsScalarFieldEnum | Prisma.BillsScalarFieldEnum[]
}

/**
 * meter_readings without action
 */
export type meter_readingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the meter_readings
   */
  select?: Prisma.meter_readingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the meter_readings
   */
  omit?: Prisma.meter_readingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.meter_readingsInclude<ExtArgs> | null
}
