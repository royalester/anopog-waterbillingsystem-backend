
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `issues` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model issues
 * 
 */
export type issuesModel = runtime.Types.Result.DefaultSelection<Prisma.$issuesPayload>

export type AggregateIssues = {
  _count: IssuesCountAggregateOutputType | null
  _avg: IssuesAvgAggregateOutputType | null
  _sum: IssuesSumAggregateOutputType | null
  _min: IssuesMinAggregateOutputType | null
  _max: IssuesMaxAggregateOutputType | null
}

export type IssuesAvgAggregateOutputType = {
  id: number | null
  user_id: number | null
}

export type IssuesSumAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
}

export type IssuesMinAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  description: string | null
  reported_date: Date | null
  is_resolved: boolean | null
  resolved_date: Date | null
}

export type IssuesMaxAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  description: string | null
  reported_date: Date | null
  is_resolved: boolean | null
  resolved_date: Date | null
}

export type IssuesCountAggregateOutputType = {
  id: number
  user_id: number
  description: number
  reported_date: number
  is_resolved: number
  resolved_date: number
  _all: number
}


export type IssuesAvgAggregateInputType = {
  id?: true
  user_id?: true
}

export type IssuesSumAggregateInputType = {
  id?: true
  user_id?: true
}

export type IssuesMinAggregateInputType = {
  id?: true
  user_id?: true
  description?: true
  reported_date?: true
  is_resolved?: true
  resolved_date?: true
}

export type IssuesMaxAggregateInputType = {
  id?: true
  user_id?: true
  description?: true
  reported_date?: true
  is_resolved?: true
  resolved_date?: true
}

export type IssuesCountAggregateInputType = {
  id?: true
  user_id?: true
  description?: true
  reported_date?: true
  is_resolved?: true
  resolved_date?: true
  _all?: true
}

export type IssuesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which issues to aggregate.
   */
  where?: Prisma.issuesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of issues to fetch.
   */
  orderBy?: Prisma.issuesOrderByWithRelationInput | Prisma.issuesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.issuesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` issues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` issues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned issues
  **/
  _count?: true | IssuesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IssuesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IssuesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IssuesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IssuesMaxAggregateInputType
}

export type GetIssuesAggregateType<T extends IssuesAggregateArgs> = {
      [P in keyof T & keyof AggregateIssues]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIssues[P]>
    : Prisma.GetScalarType<T[P], AggregateIssues[P]>
}




export type issuesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.issuesWhereInput
  orderBy?: Prisma.issuesOrderByWithAggregationInput | Prisma.issuesOrderByWithAggregationInput[]
  by: Prisma.IssuesScalarFieldEnum[] | Prisma.IssuesScalarFieldEnum
  having?: Prisma.issuesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IssuesCountAggregateInputType | true
  _avg?: IssuesAvgAggregateInputType
  _sum?: IssuesSumAggregateInputType
  _min?: IssuesMinAggregateInputType
  _max?: IssuesMaxAggregateInputType
}

export type IssuesGroupByOutputType = {
  id: bigint
  user_id: bigint
  description: string
  reported_date: Date
  is_resolved: boolean | null
  resolved_date: Date | null
  _count: IssuesCountAggregateOutputType | null
  _avg: IssuesAvgAggregateOutputType | null
  _sum: IssuesSumAggregateOutputType | null
  _min: IssuesMinAggregateOutputType | null
  _max: IssuesMaxAggregateOutputType | null
}

type GetIssuesGroupByPayload<T extends issuesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IssuesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IssuesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IssuesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IssuesGroupByOutputType[P]>
      }
    >
  >



export type issuesWhereInput = {
  AND?: Prisma.issuesWhereInput | Prisma.issuesWhereInput[]
  OR?: Prisma.issuesWhereInput[]
  NOT?: Prisma.issuesWhereInput | Prisma.issuesWhereInput[]
  id?: Prisma.BigIntFilter<"issues"> | bigint | number
  user_id?: Prisma.BigIntFilter<"issues"> | bigint | number
  description?: Prisma.StringFilter<"issues"> | string
  reported_date?: Prisma.DateTimeFilter<"issues"> | Date | string
  is_resolved?: Prisma.BoolNullableFilter<"issues"> | boolean | null
  resolved_date?: Prisma.DateTimeNullableFilter<"issues"> | Date | string | null
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}

export type issuesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  reported_date?: Prisma.SortOrder
  is_resolved?: Prisma.SortOrderInput | Prisma.SortOrder
  resolved_date?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.usersOrderByWithRelationInput
}

export type issuesWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.issuesWhereInput | Prisma.issuesWhereInput[]
  OR?: Prisma.issuesWhereInput[]
  NOT?: Prisma.issuesWhereInput | Prisma.issuesWhereInput[]
  user_id?: Prisma.BigIntFilter<"issues"> | bigint | number
  description?: Prisma.StringFilter<"issues"> | string
  reported_date?: Prisma.DateTimeFilter<"issues"> | Date | string
  is_resolved?: Prisma.BoolNullableFilter<"issues"> | boolean | null
  resolved_date?: Prisma.DateTimeNullableFilter<"issues"> | Date | string | null
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}, "id">

export type issuesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  reported_date?: Prisma.SortOrder
  is_resolved?: Prisma.SortOrderInput | Prisma.SortOrder
  resolved_date?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.issuesCountOrderByAggregateInput
  _avg?: Prisma.issuesAvgOrderByAggregateInput
  _max?: Prisma.issuesMaxOrderByAggregateInput
  _min?: Prisma.issuesMinOrderByAggregateInput
  _sum?: Prisma.issuesSumOrderByAggregateInput
}

export type issuesScalarWhereWithAggregatesInput = {
  AND?: Prisma.issuesScalarWhereWithAggregatesInput | Prisma.issuesScalarWhereWithAggregatesInput[]
  OR?: Prisma.issuesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.issuesScalarWhereWithAggregatesInput | Prisma.issuesScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"issues"> | bigint | number
  user_id?: Prisma.BigIntWithAggregatesFilter<"issues"> | bigint | number
  description?: Prisma.StringWithAggregatesFilter<"issues"> | string
  reported_date?: Prisma.DateTimeWithAggregatesFilter<"issues"> | Date | string
  is_resolved?: Prisma.BoolNullableWithAggregatesFilter<"issues"> | boolean | null
  resolved_date?: Prisma.DateTimeNullableWithAggregatesFilter<"issues"> | Date | string | null
}

export type issuesCreateInput = {
  id?: bigint | number
  description: string
  reported_date: Date | string
  is_resolved?: boolean | null
  resolved_date?: Date | string | null
  user: Prisma.usersCreateNestedOneWithoutIssuesInput
}

export type issuesUncheckedCreateInput = {
  id?: bigint | number
  user_id: bigint | number
  description: string
  reported_date: Date | string
  is_resolved?: boolean | null
  resolved_date?: Date | string | null
}

export type issuesUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  reported_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolved_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.usersUpdateOneRequiredWithoutIssuesNestedInput
}

export type issuesUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  reported_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolved_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type issuesCreateManyInput = {
  id?: bigint | number
  user_id: bigint | number
  description: string
  reported_date: Date | string
  is_resolved?: boolean | null
  resolved_date?: Date | string | null
}

export type issuesUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  reported_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolved_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type issuesUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  reported_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolved_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type IssuesListRelationFilter = {
  every?: Prisma.issuesWhereInput
  some?: Prisma.issuesWhereInput
  none?: Prisma.issuesWhereInput
}

export type issuesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type issuesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  reported_date?: Prisma.SortOrder
  is_resolved?: Prisma.SortOrder
  resolved_date?: Prisma.SortOrder
}

export type issuesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type issuesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  reported_date?: Prisma.SortOrder
  is_resolved?: Prisma.SortOrder
  resolved_date?: Prisma.SortOrder
}

export type issuesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  reported_date?: Prisma.SortOrder
  is_resolved?: Prisma.SortOrder
  resolved_date?: Prisma.SortOrder
}

export type issuesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type issuesCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.issuesCreateWithoutUserInput, Prisma.issuesUncheckedCreateWithoutUserInput> | Prisma.issuesCreateWithoutUserInput[] | Prisma.issuesUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.issuesCreateOrConnectWithoutUserInput | Prisma.issuesCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.issuesCreateManyUserInputEnvelope
  connect?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
}

export type issuesUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.issuesCreateWithoutUserInput, Prisma.issuesUncheckedCreateWithoutUserInput> | Prisma.issuesCreateWithoutUserInput[] | Prisma.issuesUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.issuesCreateOrConnectWithoutUserInput | Prisma.issuesCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.issuesCreateManyUserInputEnvelope
  connect?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
}

export type issuesUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.issuesCreateWithoutUserInput, Prisma.issuesUncheckedCreateWithoutUserInput> | Prisma.issuesCreateWithoutUserInput[] | Prisma.issuesUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.issuesCreateOrConnectWithoutUserInput | Prisma.issuesCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.issuesUpsertWithWhereUniqueWithoutUserInput | Prisma.issuesUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.issuesCreateManyUserInputEnvelope
  set?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
  disconnect?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
  delete?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
  connect?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
  update?: Prisma.issuesUpdateWithWhereUniqueWithoutUserInput | Prisma.issuesUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.issuesUpdateManyWithWhereWithoutUserInput | Prisma.issuesUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.issuesScalarWhereInput | Prisma.issuesScalarWhereInput[]
}

export type issuesUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.issuesCreateWithoutUserInput, Prisma.issuesUncheckedCreateWithoutUserInput> | Prisma.issuesCreateWithoutUserInput[] | Prisma.issuesUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.issuesCreateOrConnectWithoutUserInput | Prisma.issuesCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.issuesUpsertWithWhereUniqueWithoutUserInput | Prisma.issuesUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.issuesCreateManyUserInputEnvelope
  set?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
  disconnect?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
  delete?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
  connect?: Prisma.issuesWhereUniqueInput | Prisma.issuesWhereUniqueInput[]
  update?: Prisma.issuesUpdateWithWhereUniqueWithoutUserInput | Prisma.issuesUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.issuesUpdateManyWithWhereWithoutUserInput | Prisma.issuesUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.issuesScalarWhereInput | Prisma.issuesScalarWhereInput[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type issuesCreateWithoutUserInput = {
  id?: bigint | number
  description: string
  reported_date: Date | string
  is_resolved?: boolean | null
  resolved_date?: Date | string | null
}

export type issuesUncheckedCreateWithoutUserInput = {
  id?: bigint | number
  description: string
  reported_date: Date | string
  is_resolved?: boolean | null
  resolved_date?: Date | string | null
}

export type issuesCreateOrConnectWithoutUserInput = {
  where: Prisma.issuesWhereUniqueInput
  create: Prisma.XOR<Prisma.issuesCreateWithoutUserInput, Prisma.issuesUncheckedCreateWithoutUserInput>
}

export type issuesCreateManyUserInputEnvelope = {
  data: Prisma.issuesCreateManyUserInput | Prisma.issuesCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type issuesUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.issuesWhereUniqueInput
  update: Prisma.XOR<Prisma.issuesUpdateWithoutUserInput, Prisma.issuesUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.issuesCreateWithoutUserInput, Prisma.issuesUncheckedCreateWithoutUserInput>
}

export type issuesUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.issuesWhereUniqueInput
  data: Prisma.XOR<Prisma.issuesUpdateWithoutUserInput, Prisma.issuesUncheckedUpdateWithoutUserInput>
}

export type issuesUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.issuesScalarWhereInput
  data: Prisma.XOR<Prisma.issuesUpdateManyMutationInput, Prisma.issuesUncheckedUpdateManyWithoutUserInput>
}

export type issuesScalarWhereInput = {
  AND?: Prisma.issuesScalarWhereInput | Prisma.issuesScalarWhereInput[]
  OR?: Prisma.issuesScalarWhereInput[]
  NOT?: Prisma.issuesScalarWhereInput | Prisma.issuesScalarWhereInput[]
  id?: Prisma.BigIntFilter<"issues"> | bigint | number
  user_id?: Prisma.BigIntFilter<"issues"> | bigint | number
  description?: Prisma.StringFilter<"issues"> | string
  reported_date?: Prisma.DateTimeFilter<"issues"> | Date | string
  is_resolved?: Prisma.BoolNullableFilter<"issues"> | boolean | null
  resolved_date?: Prisma.DateTimeNullableFilter<"issues"> | Date | string | null
}

export type issuesCreateManyUserInput = {
  id?: bigint | number
  description: string
  reported_date: Date | string
  is_resolved?: boolean | null
  resolved_date?: Date | string | null
}

export type issuesUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  reported_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolved_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type issuesUncheckedUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  reported_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolved_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type issuesUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  reported_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolved_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type issuesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  description?: boolean
  reported_date?: boolean
  is_resolved?: boolean
  resolved_date?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["issues"]>

export type issuesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  description?: boolean
  reported_date?: boolean
  is_resolved?: boolean
  resolved_date?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["issues"]>

export type issuesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  description?: boolean
  reported_date?: boolean
  is_resolved?: boolean
  resolved_date?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["issues"]>

export type issuesSelectScalar = {
  id?: boolean
  user_id?: boolean
  description?: boolean
  reported_date?: boolean
  is_resolved?: boolean
  resolved_date?: boolean
}

export type issuesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "description" | "reported_date" | "is_resolved" | "resolved_date", ExtArgs["result"]["issues"]>
export type issuesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type issuesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type issuesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}

export type $issuesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "issues"
  objects: {
    user: Prisma.$usersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    user_id: bigint
    description: string
    reported_date: Date
    is_resolved: boolean | null
    resolved_date: Date | null
  }, ExtArgs["result"]["issues"]>
  composites: {}
}

export type issuesGetPayload<S extends boolean | null | undefined | issuesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$issuesPayload, S>

export type issuesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<issuesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IssuesCountAggregateInputType | true
  }

export interface issuesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['issues'], meta: { name: 'issues' } }
  /**
   * Find zero or one Issues that matches the filter.
   * @param {issuesFindUniqueArgs} args - Arguments to find a Issues
   * @example
   * // Get one Issues
   * const issues = await prisma.issues.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends issuesFindUniqueArgs>(args: Prisma.SelectSubset<T, issuesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__issuesClient<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Issues that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {issuesFindUniqueOrThrowArgs} args - Arguments to find a Issues
   * @example
   * // Get one Issues
   * const issues = await prisma.issues.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends issuesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, issuesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__issuesClient<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Issues that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {issuesFindFirstArgs} args - Arguments to find a Issues
   * @example
   * // Get one Issues
   * const issues = await prisma.issues.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends issuesFindFirstArgs>(args?: Prisma.SelectSubset<T, issuesFindFirstArgs<ExtArgs>>): Prisma.Prisma__issuesClient<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Issues that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {issuesFindFirstOrThrowArgs} args - Arguments to find a Issues
   * @example
   * // Get one Issues
   * const issues = await prisma.issues.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends issuesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, issuesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__issuesClient<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Issues that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {issuesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Issues
   * const issues = await prisma.issues.findMany()
   * 
   * // Get first 10 Issues
   * const issues = await prisma.issues.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const issuesWithIdOnly = await prisma.issues.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends issuesFindManyArgs>(args?: Prisma.SelectSubset<T, issuesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Issues.
   * @param {issuesCreateArgs} args - Arguments to create a Issues.
   * @example
   * // Create one Issues
   * const Issues = await prisma.issues.create({
   *   data: {
   *     // ... data to create a Issues
   *   }
   * })
   * 
   */
  create<T extends issuesCreateArgs>(args: Prisma.SelectSubset<T, issuesCreateArgs<ExtArgs>>): Prisma.Prisma__issuesClient<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Issues.
   * @param {issuesCreateManyArgs} args - Arguments to create many Issues.
   * @example
   * // Create many Issues
   * const issues = await prisma.issues.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends issuesCreateManyArgs>(args?: Prisma.SelectSubset<T, issuesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Issues and returns the data saved in the database.
   * @param {issuesCreateManyAndReturnArgs} args - Arguments to create many Issues.
   * @example
   * // Create many Issues
   * const issues = await prisma.issues.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Issues and only return the `id`
   * const issuesWithIdOnly = await prisma.issues.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends issuesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, issuesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Issues.
   * @param {issuesDeleteArgs} args - Arguments to delete one Issues.
   * @example
   * // Delete one Issues
   * const Issues = await prisma.issues.delete({
   *   where: {
   *     // ... filter to delete one Issues
   *   }
   * })
   * 
   */
  delete<T extends issuesDeleteArgs>(args: Prisma.SelectSubset<T, issuesDeleteArgs<ExtArgs>>): Prisma.Prisma__issuesClient<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Issues.
   * @param {issuesUpdateArgs} args - Arguments to update one Issues.
   * @example
   * // Update one Issues
   * const issues = await prisma.issues.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends issuesUpdateArgs>(args: Prisma.SelectSubset<T, issuesUpdateArgs<ExtArgs>>): Prisma.Prisma__issuesClient<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Issues.
   * @param {issuesDeleteManyArgs} args - Arguments to filter Issues to delete.
   * @example
   * // Delete a few Issues
   * const { count } = await prisma.issues.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends issuesDeleteManyArgs>(args?: Prisma.SelectSubset<T, issuesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Issues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {issuesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Issues
   * const issues = await prisma.issues.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends issuesUpdateManyArgs>(args: Prisma.SelectSubset<T, issuesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Issues and returns the data updated in the database.
   * @param {issuesUpdateManyAndReturnArgs} args - Arguments to update many Issues.
   * @example
   * // Update many Issues
   * const issues = await prisma.issues.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Issues and only return the `id`
   * const issuesWithIdOnly = await prisma.issues.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends issuesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, issuesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Issues.
   * @param {issuesUpsertArgs} args - Arguments to update or create a Issues.
   * @example
   * // Update or create a Issues
   * const issues = await prisma.issues.upsert({
   *   create: {
   *     // ... data to create a Issues
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Issues we want to update
   *   }
   * })
   */
  upsert<T extends issuesUpsertArgs>(args: Prisma.SelectSubset<T, issuesUpsertArgs<ExtArgs>>): Prisma.Prisma__issuesClient<runtime.Types.Result.GetResult<Prisma.$issuesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Issues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {issuesCountArgs} args - Arguments to filter Issues to count.
   * @example
   * // Count the number of Issues
   * const count = await prisma.issues.count({
   *   where: {
   *     // ... the filter for the Issues we want to count
   *   }
   * })
  **/
  count<T extends issuesCountArgs>(
    args?: Prisma.Subset<T, issuesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IssuesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Issues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IssuesAggregateArgs>(args: Prisma.Subset<T, IssuesAggregateArgs>): Prisma.PrismaPromise<GetIssuesAggregateType<T>>

  /**
   * Group by Issues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {issuesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends issuesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: issuesGroupByArgs['orderBy'] }
      : { orderBy?: issuesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, issuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIssuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the issues model
 */
readonly fields: issuesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for issues.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__issuesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.usersDefaultArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the issues model
 */
export interface issuesFieldRefs {
  readonly id: Prisma.FieldRef<"issues", 'BigInt'>
  readonly user_id: Prisma.FieldRef<"issues", 'BigInt'>
  readonly description: Prisma.FieldRef<"issues", 'String'>
  readonly reported_date: Prisma.FieldRef<"issues", 'DateTime'>
  readonly is_resolved: Prisma.FieldRef<"issues", 'Boolean'>
  readonly resolved_date: Prisma.FieldRef<"issues", 'DateTime'>
}
    

// Custom InputTypes
/**
 * issues findUnique
 */
export type issuesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * Filter, which issues to fetch.
   */
  where: Prisma.issuesWhereUniqueInput
}

/**
 * issues findUniqueOrThrow
 */
export type issuesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * Filter, which issues to fetch.
   */
  where: Prisma.issuesWhereUniqueInput
}

/**
 * issues findFirst
 */
export type issuesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * Filter, which issues to fetch.
   */
  where?: Prisma.issuesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of issues to fetch.
   */
  orderBy?: Prisma.issuesOrderByWithRelationInput | Prisma.issuesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for issues.
   */
  cursor?: Prisma.issuesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` issues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` issues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of issues.
   */
  distinct?: Prisma.IssuesScalarFieldEnum | Prisma.IssuesScalarFieldEnum[]
}

/**
 * issues findFirstOrThrow
 */
export type issuesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * Filter, which issues to fetch.
   */
  where?: Prisma.issuesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of issues to fetch.
   */
  orderBy?: Prisma.issuesOrderByWithRelationInput | Prisma.issuesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for issues.
   */
  cursor?: Prisma.issuesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` issues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` issues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of issues.
   */
  distinct?: Prisma.IssuesScalarFieldEnum | Prisma.IssuesScalarFieldEnum[]
}

/**
 * issues findMany
 */
export type issuesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * Filter, which issues to fetch.
   */
  where?: Prisma.issuesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of issues to fetch.
   */
  orderBy?: Prisma.issuesOrderByWithRelationInput | Prisma.issuesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing issues.
   */
  cursor?: Prisma.issuesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` issues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` issues.
   */
  skip?: number
  distinct?: Prisma.IssuesScalarFieldEnum | Prisma.IssuesScalarFieldEnum[]
}

/**
 * issues create
 */
export type issuesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * The data needed to create a issues.
   */
  data: Prisma.XOR<Prisma.issuesCreateInput, Prisma.issuesUncheckedCreateInput>
}

/**
 * issues createMany
 */
export type issuesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many issues.
   */
  data: Prisma.issuesCreateManyInput | Prisma.issuesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * issues createManyAndReturn
 */
export type issuesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * The data used to create many issues.
   */
  data: Prisma.issuesCreateManyInput | Prisma.issuesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * issues update
 */
export type issuesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * The data needed to update a issues.
   */
  data: Prisma.XOR<Prisma.issuesUpdateInput, Prisma.issuesUncheckedUpdateInput>
  /**
   * Choose, which issues to update.
   */
  where: Prisma.issuesWhereUniqueInput
}

/**
 * issues updateMany
 */
export type issuesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update issues.
   */
  data: Prisma.XOR<Prisma.issuesUpdateManyMutationInput, Prisma.issuesUncheckedUpdateManyInput>
  /**
   * Filter which issues to update
   */
  where?: Prisma.issuesWhereInput
  /**
   * Limit how many issues to update.
   */
  limit?: number
}

/**
 * issues updateManyAndReturn
 */
export type issuesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * The data used to update issues.
   */
  data: Prisma.XOR<Prisma.issuesUpdateManyMutationInput, Prisma.issuesUncheckedUpdateManyInput>
  /**
   * Filter which issues to update
   */
  where?: Prisma.issuesWhereInput
  /**
   * Limit how many issues to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * issues upsert
 */
export type issuesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * The filter to search for the issues to update in case it exists.
   */
  where: Prisma.issuesWhereUniqueInput
  /**
   * In case the issues found by the `where` argument doesn't exist, create a new issues with this data.
   */
  create: Prisma.XOR<Prisma.issuesCreateInput, Prisma.issuesUncheckedCreateInput>
  /**
   * In case the issues was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.issuesUpdateInput, Prisma.issuesUncheckedUpdateInput>
}

/**
 * issues delete
 */
export type issuesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
  /**
   * Filter which issues to delete.
   */
  where: Prisma.issuesWhereUniqueInput
}

/**
 * issues deleteMany
 */
export type issuesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which issues to delete
   */
  where?: Prisma.issuesWhereInput
  /**
   * Limit how many issues to delete.
   */
  limit?: number
}

/**
 * issues without action
 */
export type issuesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the issues
   */
  select?: Prisma.issuesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the issues
   */
  omit?: Prisma.issuesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.issuesInclude<ExtArgs> | null
}
