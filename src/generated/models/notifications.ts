
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `notifications` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model notifications
 * 
 */
export type notificationsModel = runtime.Types.Result.DefaultSelection<Prisma.$notificationsPayload>

export type AggregateNotifications = {
  _count: NotificationsCountAggregateOutputType | null
  _avg: NotificationsAvgAggregateOutputType | null
  _sum: NotificationsSumAggregateOutputType | null
  _min: NotificationsMinAggregateOutputType | null
  _max: NotificationsMaxAggregateOutputType | null
}

export type NotificationsAvgAggregateOutputType = {
  id: number | null
  user_id: number | null
}

export type NotificationsSumAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
}

export type NotificationsMinAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  message: string | null
  notification_date: Date | null
}

export type NotificationsMaxAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  message: string | null
  notification_date: Date | null
}

export type NotificationsCountAggregateOutputType = {
  id: number
  user_id: number
  message: number
  notification_date: number
  _all: number
}


export type NotificationsAvgAggregateInputType = {
  id?: true
  user_id?: true
}

export type NotificationsSumAggregateInputType = {
  id?: true
  user_id?: true
}

export type NotificationsMinAggregateInputType = {
  id?: true
  user_id?: true
  message?: true
  notification_date?: true
}

export type NotificationsMaxAggregateInputType = {
  id?: true
  user_id?: true
  message?: true
  notification_date?: true
}

export type NotificationsCountAggregateInputType = {
  id?: true
  user_id?: true
  message?: true
  notification_date?: true
  _all?: true
}

export type NotificationsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which notifications to aggregate.
   */
  where?: Prisma.notificationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of notifications to fetch.
   */
  orderBy?: Prisma.notificationsOrderByWithRelationInput | Prisma.notificationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.notificationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` notifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` notifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned notifications
  **/
  _count?: true | NotificationsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: NotificationsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: NotificationsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NotificationsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NotificationsMaxAggregateInputType
}

export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
      [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotifications[P]>
    : Prisma.GetScalarType<T[P], AggregateNotifications[P]>
}




export type notificationsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.notificationsWhereInput
  orderBy?: Prisma.notificationsOrderByWithAggregationInput | Prisma.notificationsOrderByWithAggregationInput[]
  by: Prisma.NotificationsScalarFieldEnum[] | Prisma.NotificationsScalarFieldEnum
  having?: Prisma.notificationsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NotificationsCountAggregateInputType | true
  _avg?: NotificationsAvgAggregateInputType
  _sum?: NotificationsSumAggregateInputType
  _min?: NotificationsMinAggregateInputType
  _max?: NotificationsMaxAggregateInputType
}

export type NotificationsGroupByOutputType = {
  id: bigint
  user_id: bigint
  message: string
  notification_date: Date
  _count: NotificationsCountAggregateOutputType | null
  _avg: NotificationsAvgAggregateOutputType | null
  _sum: NotificationsSumAggregateOutputType | null
  _min: NotificationsMinAggregateOutputType | null
  _max: NotificationsMaxAggregateOutputType | null
}

type GetNotificationsGroupByPayload<T extends notificationsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NotificationsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotificationsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotificationsGroupByOutputType[P]>
      }
    >
  >



export type notificationsWhereInput = {
  AND?: Prisma.notificationsWhereInput | Prisma.notificationsWhereInput[]
  OR?: Prisma.notificationsWhereInput[]
  NOT?: Prisma.notificationsWhereInput | Prisma.notificationsWhereInput[]
  id?: Prisma.BigIntFilter<"notifications"> | bigint | number
  user_id?: Prisma.BigIntFilter<"notifications"> | bigint | number
  message?: Prisma.StringFilter<"notifications"> | string
  notification_date?: Prisma.DateTimeFilter<"notifications"> | Date | string
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}

export type notificationsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  notification_date?: Prisma.SortOrder
  user?: Prisma.usersOrderByWithRelationInput
}

export type notificationsWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.notificationsWhereInput | Prisma.notificationsWhereInput[]
  OR?: Prisma.notificationsWhereInput[]
  NOT?: Prisma.notificationsWhereInput | Prisma.notificationsWhereInput[]
  user_id?: Prisma.BigIntFilter<"notifications"> | bigint | number
  message?: Prisma.StringFilter<"notifications"> | string
  notification_date?: Prisma.DateTimeFilter<"notifications"> | Date | string
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}, "id">

export type notificationsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  notification_date?: Prisma.SortOrder
  _count?: Prisma.notificationsCountOrderByAggregateInput
  _avg?: Prisma.notificationsAvgOrderByAggregateInput
  _max?: Prisma.notificationsMaxOrderByAggregateInput
  _min?: Prisma.notificationsMinOrderByAggregateInput
  _sum?: Prisma.notificationsSumOrderByAggregateInput
}

export type notificationsScalarWhereWithAggregatesInput = {
  AND?: Prisma.notificationsScalarWhereWithAggregatesInput | Prisma.notificationsScalarWhereWithAggregatesInput[]
  OR?: Prisma.notificationsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.notificationsScalarWhereWithAggregatesInput | Prisma.notificationsScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"notifications"> | bigint | number
  user_id?: Prisma.BigIntWithAggregatesFilter<"notifications"> | bigint | number
  message?: Prisma.StringWithAggregatesFilter<"notifications"> | string
  notification_date?: Prisma.DateTimeWithAggregatesFilter<"notifications"> | Date | string
}

export type notificationsCreateInput = {
  id?: bigint | number
  message: string
  notification_date: Date | string
  user: Prisma.usersCreateNestedOneWithoutNotificationsInput
}

export type notificationsUncheckedCreateInput = {
  id?: bigint | number
  user_id: bigint | number
  message: string
  notification_date: Date | string
}

export type notificationsUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  notification_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.usersUpdateOneRequiredWithoutNotificationsNestedInput
}

export type notificationsUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  notification_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type notificationsCreateManyInput = {
  id?: bigint | number
  user_id: bigint | number
  message: string
  notification_date: Date | string
}

export type notificationsUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  notification_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type notificationsUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  notification_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationsListRelationFilter = {
  every?: Prisma.notificationsWhereInput
  some?: Prisma.notificationsWhereInput
  none?: Prisma.notificationsWhereInput
}

export type notificationsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type notificationsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  notification_date?: Prisma.SortOrder
}

export type notificationsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type notificationsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  notification_date?: Prisma.SortOrder
}

export type notificationsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  notification_date?: Prisma.SortOrder
}

export type notificationsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type notificationsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.notificationsCreateWithoutUserInput, Prisma.notificationsUncheckedCreateWithoutUserInput> | Prisma.notificationsCreateWithoutUserInput[] | Prisma.notificationsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.notificationsCreateOrConnectWithoutUserInput | Prisma.notificationsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.notificationsCreateManyUserInputEnvelope
  connect?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
}

export type notificationsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.notificationsCreateWithoutUserInput, Prisma.notificationsUncheckedCreateWithoutUserInput> | Prisma.notificationsCreateWithoutUserInput[] | Prisma.notificationsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.notificationsCreateOrConnectWithoutUserInput | Prisma.notificationsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.notificationsCreateManyUserInputEnvelope
  connect?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
}

export type notificationsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.notificationsCreateWithoutUserInput, Prisma.notificationsUncheckedCreateWithoutUserInput> | Prisma.notificationsCreateWithoutUserInput[] | Prisma.notificationsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.notificationsCreateOrConnectWithoutUserInput | Prisma.notificationsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.notificationsUpsertWithWhereUniqueWithoutUserInput | Prisma.notificationsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.notificationsCreateManyUserInputEnvelope
  set?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
  disconnect?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
  delete?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
  connect?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
  update?: Prisma.notificationsUpdateWithWhereUniqueWithoutUserInput | Prisma.notificationsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.notificationsUpdateManyWithWhereWithoutUserInput | Prisma.notificationsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.notificationsScalarWhereInput | Prisma.notificationsScalarWhereInput[]
}

export type notificationsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.notificationsCreateWithoutUserInput, Prisma.notificationsUncheckedCreateWithoutUserInput> | Prisma.notificationsCreateWithoutUserInput[] | Prisma.notificationsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.notificationsCreateOrConnectWithoutUserInput | Prisma.notificationsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.notificationsUpsertWithWhereUniqueWithoutUserInput | Prisma.notificationsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.notificationsCreateManyUserInputEnvelope
  set?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
  disconnect?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
  delete?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
  connect?: Prisma.notificationsWhereUniqueInput | Prisma.notificationsWhereUniqueInput[]
  update?: Prisma.notificationsUpdateWithWhereUniqueWithoutUserInput | Prisma.notificationsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.notificationsUpdateManyWithWhereWithoutUserInput | Prisma.notificationsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.notificationsScalarWhereInput | Prisma.notificationsScalarWhereInput[]
}

export type notificationsCreateWithoutUserInput = {
  id?: bigint | number
  message: string
  notification_date: Date | string
}

export type notificationsUncheckedCreateWithoutUserInput = {
  id?: bigint | number
  message: string
  notification_date: Date | string
}

export type notificationsCreateOrConnectWithoutUserInput = {
  where: Prisma.notificationsWhereUniqueInput
  create: Prisma.XOR<Prisma.notificationsCreateWithoutUserInput, Prisma.notificationsUncheckedCreateWithoutUserInput>
}

export type notificationsCreateManyUserInputEnvelope = {
  data: Prisma.notificationsCreateManyUserInput | Prisma.notificationsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type notificationsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.notificationsWhereUniqueInput
  update: Prisma.XOR<Prisma.notificationsUpdateWithoutUserInput, Prisma.notificationsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.notificationsCreateWithoutUserInput, Prisma.notificationsUncheckedCreateWithoutUserInput>
}

export type notificationsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.notificationsWhereUniqueInput
  data: Prisma.XOR<Prisma.notificationsUpdateWithoutUserInput, Prisma.notificationsUncheckedUpdateWithoutUserInput>
}

export type notificationsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.notificationsScalarWhereInput
  data: Prisma.XOR<Prisma.notificationsUpdateManyMutationInput, Prisma.notificationsUncheckedUpdateManyWithoutUserInput>
}

export type notificationsScalarWhereInput = {
  AND?: Prisma.notificationsScalarWhereInput | Prisma.notificationsScalarWhereInput[]
  OR?: Prisma.notificationsScalarWhereInput[]
  NOT?: Prisma.notificationsScalarWhereInput | Prisma.notificationsScalarWhereInput[]
  id?: Prisma.BigIntFilter<"notifications"> | bigint | number
  user_id?: Prisma.BigIntFilter<"notifications"> | bigint | number
  message?: Prisma.StringFilter<"notifications"> | string
  notification_date?: Prisma.DateTimeFilter<"notifications"> | Date | string
}

export type notificationsCreateManyUserInput = {
  id?: bigint | number
  message: string
  notification_date: Date | string
}

export type notificationsUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  notification_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type notificationsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  notification_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type notificationsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  notification_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type notificationsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  message?: boolean
  notification_date?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["notifications"]>

export type notificationsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  message?: boolean
  notification_date?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["notifications"]>

export type notificationsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  message?: boolean
  notification_date?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["notifications"]>

export type notificationsSelectScalar = {
  id?: boolean
  user_id?: boolean
  message?: boolean
  notification_date?: boolean
}

export type notificationsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "message" | "notification_date", ExtArgs["result"]["notifications"]>
export type notificationsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type notificationsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type notificationsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}

export type $notificationsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "notifications"
  objects: {
    user: Prisma.$usersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    user_id: bigint
    message: string
    notification_date: Date
  }, ExtArgs["result"]["notifications"]>
  composites: {}
}

export type notificationsGetPayload<S extends boolean | null | undefined | notificationsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$notificationsPayload, S>

export type notificationsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<notificationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NotificationsCountAggregateInputType | true
  }

export interface notificationsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notifications'], meta: { name: 'notifications' } }
  /**
   * Find zero or one Notifications that matches the filter.
   * @param {notificationsFindUniqueArgs} args - Arguments to find a Notifications
   * @example
   * // Get one Notifications
   * const notifications = await prisma.notifications.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends notificationsFindUniqueArgs>(args: Prisma.SelectSubset<T, notificationsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__notificationsClient<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Notifications that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {notificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
   * @example
   * // Get one Notifications
   * const notifications = await prisma.notifications.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends notificationsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, notificationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__notificationsClient<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Notifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notificationsFindFirstArgs} args - Arguments to find a Notifications
   * @example
   * // Get one Notifications
   * const notifications = await prisma.notifications.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends notificationsFindFirstArgs>(args?: Prisma.SelectSubset<T, notificationsFindFirstArgs<ExtArgs>>): Prisma.Prisma__notificationsClient<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Notifications that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
   * @example
   * // Get one Notifications
   * const notifications = await prisma.notifications.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends notificationsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, notificationsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__notificationsClient<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Notifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notificationsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Notifications
   * const notifications = await prisma.notifications.findMany()
   * 
   * // Get first 10 Notifications
   * const notifications = await prisma.notifications.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const notificationsWithIdOnly = await prisma.notifications.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends notificationsFindManyArgs>(args?: Prisma.SelectSubset<T, notificationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Notifications.
   * @param {notificationsCreateArgs} args - Arguments to create a Notifications.
   * @example
   * // Create one Notifications
   * const Notifications = await prisma.notifications.create({
   *   data: {
   *     // ... data to create a Notifications
   *   }
   * })
   * 
   */
  create<T extends notificationsCreateArgs>(args: Prisma.SelectSubset<T, notificationsCreateArgs<ExtArgs>>): Prisma.Prisma__notificationsClient<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Notifications.
   * @param {notificationsCreateManyArgs} args - Arguments to create many Notifications.
   * @example
   * // Create many Notifications
   * const notifications = await prisma.notifications.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends notificationsCreateManyArgs>(args?: Prisma.SelectSubset<T, notificationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Notifications and returns the data saved in the database.
   * @param {notificationsCreateManyAndReturnArgs} args - Arguments to create many Notifications.
   * @example
   * // Create many Notifications
   * const notifications = await prisma.notifications.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Notifications and only return the `id`
   * const notificationsWithIdOnly = await prisma.notifications.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends notificationsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, notificationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Notifications.
   * @param {notificationsDeleteArgs} args - Arguments to delete one Notifications.
   * @example
   * // Delete one Notifications
   * const Notifications = await prisma.notifications.delete({
   *   where: {
   *     // ... filter to delete one Notifications
   *   }
   * })
   * 
   */
  delete<T extends notificationsDeleteArgs>(args: Prisma.SelectSubset<T, notificationsDeleteArgs<ExtArgs>>): Prisma.Prisma__notificationsClient<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Notifications.
   * @param {notificationsUpdateArgs} args - Arguments to update one Notifications.
   * @example
   * // Update one Notifications
   * const notifications = await prisma.notifications.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends notificationsUpdateArgs>(args: Prisma.SelectSubset<T, notificationsUpdateArgs<ExtArgs>>): Prisma.Prisma__notificationsClient<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Notifications.
   * @param {notificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
   * @example
   * // Delete a few Notifications
   * const { count } = await prisma.notifications.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends notificationsDeleteManyArgs>(args?: Prisma.SelectSubset<T, notificationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notificationsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Notifications
   * const notifications = await prisma.notifications.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends notificationsUpdateManyArgs>(args: Prisma.SelectSubset<T, notificationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notifications and returns the data updated in the database.
   * @param {notificationsUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
   * @example
   * // Update many Notifications
   * const notifications = await prisma.notifications.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Notifications and only return the `id`
   * const notificationsWithIdOnly = await prisma.notifications.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends notificationsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, notificationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Notifications.
   * @param {notificationsUpsertArgs} args - Arguments to update or create a Notifications.
   * @example
   * // Update or create a Notifications
   * const notifications = await prisma.notifications.upsert({
   *   create: {
   *     // ... data to create a Notifications
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Notifications we want to update
   *   }
   * })
   */
  upsert<T extends notificationsUpsertArgs>(args: Prisma.SelectSubset<T, notificationsUpsertArgs<ExtArgs>>): Prisma.Prisma__notificationsClient<runtime.Types.Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Notifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notificationsCountArgs} args - Arguments to filter Notifications to count.
   * @example
   * // Count the number of Notifications
   * const count = await prisma.notifications.count({
   *   where: {
   *     // ... the filter for the Notifications we want to count
   *   }
   * })
  **/
  count<T extends notificationsCountArgs>(
    args?: Prisma.Subset<T, notificationsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NotificationsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Notifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NotificationsAggregateArgs>(args: Prisma.Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

  /**
   * Group by Notifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notificationsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends notificationsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: notificationsGroupByArgs['orderBy'] }
      : { orderBy?: notificationsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, notificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the notifications model
 */
readonly fields: notificationsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for notifications.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__notificationsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.usersDefaultArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the notifications model
 */
export interface notificationsFieldRefs {
  readonly id: Prisma.FieldRef<"notifications", 'BigInt'>
  readonly user_id: Prisma.FieldRef<"notifications", 'BigInt'>
  readonly message: Prisma.FieldRef<"notifications", 'String'>
  readonly notification_date: Prisma.FieldRef<"notifications", 'DateTime'>
}
    

// Custom InputTypes
/**
 * notifications findUnique
 */
export type notificationsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * Filter, which notifications to fetch.
   */
  where: Prisma.notificationsWhereUniqueInput
}

/**
 * notifications findUniqueOrThrow
 */
export type notificationsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * Filter, which notifications to fetch.
   */
  where: Prisma.notificationsWhereUniqueInput
}

/**
 * notifications findFirst
 */
export type notificationsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * Filter, which notifications to fetch.
   */
  where?: Prisma.notificationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of notifications to fetch.
   */
  orderBy?: Prisma.notificationsOrderByWithRelationInput | Prisma.notificationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for notifications.
   */
  cursor?: Prisma.notificationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` notifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` notifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of notifications.
   */
  distinct?: Prisma.NotificationsScalarFieldEnum | Prisma.NotificationsScalarFieldEnum[]
}

/**
 * notifications findFirstOrThrow
 */
export type notificationsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * Filter, which notifications to fetch.
   */
  where?: Prisma.notificationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of notifications to fetch.
   */
  orderBy?: Prisma.notificationsOrderByWithRelationInput | Prisma.notificationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for notifications.
   */
  cursor?: Prisma.notificationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` notifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` notifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of notifications.
   */
  distinct?: Prisma.NotificationsScalarFieldEnum | Prisma.NotificationsScalarFieldEnum[]
}

/**
 * notifications findMany
 */
export type notificationsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * Filter, which notifications to fetch.
   */
  where?: Prisma.notificationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of notifications to fetch.
   */
  orderBy?: Prisma.notificationsOrderByWithRelationInput | Prisma.notificationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing notifications.
   */
  cursor?: Prisma.notificationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` notifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` notifications.
   */
  skip?: number
  distinct?: Prisma.NotificationsScalarFieldEnum | Prisma.NotificationsScalarFieldEnum[]
}

/**
 * notifications create
 */
export type notificationsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * The data needed to create a notifications.
   */
  data: Prisma.XOR<Prisma.notificationsCreateInput, Prisma.notificationsUncheckedCreateInput>
}

/**
 * notifications createMany
 */
export type notificationsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many notifications.
   */
  data: Prisma.notificationsCreateManyInput | Prisma.notificationsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * notifications createManyAndReturn
 */
export type notificationsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * The data used to create many notifications.
   */
  data: Prisma.notificationsCreateManyInput | Prisma.notificationsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * notifications update
 */
export type notificationsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * The data needed to update a notifications.
   */
  data: Prisma.XOR<Prisma.notificationsUpdateInput, Prisma.notificationsUncheckedUpdateInput>
  /**
   * Choose, which notifications to update.
   */
  where: Prisma.notificationsWhereUniqueInput
}

/**
 * notifications updateMany
 */
export type notificationsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update notifications.
   */
  data: Prisma.XOR<Prisma.notificationsUpdateManyMutationInput, Prisma.notificationsUncheckedUpdateManyInput>
  /**
   * Filter which notifications to update
   */
  where?: Prisma.notificationsWhereInput
  /**
   * Limit how many notifications to update.
   */
  limit?: number
}

/**
 * notifications updateManyAndReturn
 */
export type notificationsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * The data used to update notifications.
   */
  data: Prisma.XOR<Prisma.notificationsUpdateManyMutationInput, Prisma.notificationsUncheckedUpdateManyInput>
  /**
   * Filter which notifications to update
   */
  where?: Prisma.notificationsWhereInput
  /**
   * Limit how many notifications to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * notifications upsert
 */
export type notificationsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * The filter to search for the notifications to update in case it exists.
   */
  where: Prisma.notificationsWhereUniqueInput
  /**
   * In case the notifications found by the `where` argument doesn't exist, create a new notifications with this data.
   */
  create: Prisma.XOR<Prisma.notificationsCreateInput, Prisma.notificationsUncheckedCreateInput>
  /**
   * In case the notifications was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.notificationsUpdateInput, Prisma.notificationsUncheckedUpdateInput>
}

/**
 * notifications delete
 */
export type notificationsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
  /**
   * Filter which notifications to delete.
   */
  where: Prisma.notificationsWhereUniqueInput
}

/**
 * notifications deleteMany
 */
export type notificationsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which notifications to delete
   */
  where?: Prisma.notificationsWhereInput
  /**
   * Limit how many notifications to delete.
   */
  limit?: number
}

/**
 * notifications without action
 */
export type notificationsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifications
   */
  select?: Prisma.notificationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifications
   */
  omit?: Prisma.notificationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notificationsInclude<ExtArgs> | null
}
