
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `roles` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model roles
 * 
 */
export type rolesModel = runtime.Types.Result.DefaultSelection<Prisma.$rolesPayload>

export type AggregateRoles = {
  _count: RolesCountAggregateOutputType | null
  _avg: RolesAvgAggregateOutputType | null
  _sum: RolesSumAggregateOutputType | null
  _min: RolesMinAggregateOutputType | null
  _max: RolesMaxAggregateOutputType | null
}

export type RolesAvgAggregateOutputType = {
  id: number | null
}

export type RolesSumAggregateOutputType = {
  id: bigint | null
}

export type RolesMinAggregateOutputType = {
  id: bigint | null
  name: string | null
}

export type RolesMaxAggregateOutputType = {
  id: bigint | null
  name: string | null
}

export type RolesCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type RolesAvgAggregateInputType = {
  id?: true
}

export type RolesSumAggregateInputType = {
  id?: true
}

export type RolesMinAggregateInputType = {
  id?: true
  name?: true
}

export type RolesMaxAggregateInputType = {
  id?: true
  name?: true
}

export type RolesCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type RolesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which roles to aggregate.
   */
  where?: Prisma.rolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of roles to fetch.
   */
  orderBy?: Prisma.rolesOrderByWithRelationInput | Prisma.rolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.rolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned roles
  **/
  _count?: true | RolesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RolesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RolesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RolesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RolesMaxAggregateInputType
}

export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
      [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRoles[P]>
    : Prisma.GetScalarType<T[P], AggregateRoles[P]>
}




export type rolesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.rolesWhereInput
  orderBy?: Prisma.rolesOrderByWithAggregationInput | Prisma.rolesOrderByWithAggregationInput[]
  by: Prisma.RolesScalarFieldEnum[] | Prisma.RolesScalarFieldEnum
  having?: Prisma.rolesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RolesCountAggregateInputType | true
  _avg?: RolesAvgAggregateInputType
  _sum?: RolesSumAggregateInputType
  _min?: RolesMinAggregateInputType
  _max?: RolesMaxAggregateInputType
}

export type RolesGroupByOutputType = {
  id: bigint
  name: string
  _count: RolesCountAggregateOutputType | null
  _avg: RolesAvgAggregateOutputType | null
  _sum: RolesSumAggregateOutputType | null
  _min: RolesMinAggregateOutputType | null
  _max: RolesMaxAggregateOutputType | null
}

type GetRolesGroupByPayload<T extends rolesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RolesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RolesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RolesGroupByOutputType[P]>
      }
    >
  >



export type rolesWhereInput = {
  AND?: Prisma.rolesWhereInput | Prisma.rolesWhereInput[]
  OR?: Prisma.rolesWhereInput[]
  NOT?: Prisma.rolesWhereInput | Prisma.rolesWhereInput[]
  id?: Prisma.BigIntFilter<"roles"> | bigint | number
  name?: Prisma.StringFilter<"roles"> | string
  user?: Prisma.UsersListRelationFilter
}

export type rolesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  user?: Prisma.usersOrderByRelationAggregateInput
}

export type rolesWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  name?: string
  AND?: Prisma.rolesWhereInput | Prisma.rolesWhereInput[]
  OR?: Prisma.rolesWhereInput[]
  NOT?: Prisma.rolesWhereInput | Prisma.rolesWhereInput[]
  user?: Prisma.UsersListRelationFilter
}, "id" | "name">

export type rolesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.rolesCountOrderByAggregateInput
  _avg?: Prisma.rolesAvgOrderByAggregateInput
  _max?: Prisma.rolesMaxOrderByAggregateInput
  _min?: Prisma.rolesMinOrderByAggregateInput
  _sum?: Prisma.rolesSumOrderByAggregateInput
}

export type rolesScalarWhereWithAggregatesInput = {
  AND?: Prisma.rolesScalarWhereWithAggregatesInput | Prisma.rolesScalarWhereWithAggregatesInput[]
  OR?: Prisma.rolesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.rolesScalarWhereWithAggregatesInput | Prisma.rolesScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"roles"> | bigint | number
  name?: Prisma.StringWithAggregatesFilter<"roles"> | string
}

export type rolesCreateInput = {
  id?: bigint | number
  name: string
  user?: Prisma.usersCreateNestedManyWithoutRoleInput
}

export type rolesUncheckedCreateInput = {
  id?: bigint | number
  name: string
  user?: Prisma.usersUncheckedCreateNestedManyWithoutRoleInput
}

export type rolesUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.usersUpdateManyWithoutRoleNestedInput
}

export type rolesUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.usersUncheckedUpdateManyWithoutRoleNestedInput
}

export type rolesCreateManyInput = {
  id?: bigint | number
  name: string
}

export type rolesUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type rolesUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type rolesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type rolesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type rolesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type rolesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type rolesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type RolesScalarRelationFilter = {
  is?: Prisma.rolesWhereInput
  isNot?: Prisma.rolesWhereInput
}

export type BigIntFieldUpdateOperationsInput = {
  set?: bigint | number
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type rolesCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.rolesCreateWithoutUserInput, Prisma.rolesUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.rolesCreateOrConnectWithoutUserInput
  connect?: Prisma.rolesWhereUniqueInput
}

export type rolesUpdateOneRequiredWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.rolesCreateWithoutUserInput, Prisma.rolesUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.rolesCreateOrConnectWithoutUserInput
  upsert?: Prisma.rolesUpsertWithoutUserInput
  connect?: Prisma.rolesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.rolesUpdateToOneWithWhereWithoutUserInput, Prisma.rolesUpdateWithoutUserInput>, Prisma.rolesUncheckedUpdateWithoutUserInput>
}

export type rolesCreateWithoutUserInput = {
  id?: bigint | number
  name: string
}

export type rolesUncheckedCreateWithoutUserInput = {
  id?: bigint | number
  name: string
}

export type rolesCreateOrConnectWithoutUserInput = {
  where: Prisma.rolesWhereUniqueInput
  create: Prisma.XOR<Prisma.rolesCreateWithoutUserInput, Prisma.rolesUncheckedCreateWithoutUserInput>
}

export type rolesUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.rolesUpdateWithoutUserInput, Prisma.rolesUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.rolesCreateWithoutUserInput, Prisma.rolesUncheckedCreateWithoutUserInput>
  where?: Prisma.rolesWhereInput
}

export type rolesUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.rolesWhereInput
  data: Prisma.XOR<Prisma.rolesUpdateWithoutUserInput, Prisma.rolesUncheckedUpdateWithoutUserInput>
}

export type rolesUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type rolesUncheckedUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type RolesCountOutputType
 */

export type RolesCountOutputType = {
  user: number
}

export type RolesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | RolesCountOutputTypeCountUserArgs
}

/**
 * RolesCountOutputType without action
 */
export type RolesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolesCountOutputType
   */
  select?: Prisma.RolesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RolesCountOutputType without action
 */
export type RolesCountOutputTypeCountUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.usersWhereInput
}


export type rolesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  user?: boolean | Prisma.roles$userArgs<ExtArgs>
  _count?: boolean | Prisma.RolesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["roles"]>

export type rolesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["roles"]>

export type rolesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["roles"]>

export type rolesSelectScalar = {
  id?: boolean
  name?: boolean
}

export type rolesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["roles"]>
export type rolesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.roles$userArgs<ExtArgs>
  _count?: boolean | Prisma.RolesCountOutputTypeDefaultArgs<ExtArgs>
}
export type rolesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type rolesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $rolesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "roles"
  objects: {
    user: Prisma.$usersPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    name: string
  }, ExtArgs["result"]["roles"]>
  composites: {}
}

export type rolesGetPayload<S extends boolean | null | undefined | rolesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$rolesPayload, S>

export type rolesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<rolesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RolesCountAggregateInputType | true
  }

export interface rolesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['roles'], meta: { name: 'roles' } }
  /**
   * Find zero or one Roles that matches the filter.
   * @param {rolesFindUniqueArgs} args - Arguments to find a Roles
   * @example
   * // Get one Roles
   * const roles = await prisma.roles.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends rolesFindUniqueArgs>(args: Prisma.SelectSubset<T, rolesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__rolesClient<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Roles that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {rolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
   * @example
   * // Get one Roles
   * const roles = await prisma.roles.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends rolesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, rolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__rolesClient<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Roles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rolesFindFirstArgs} args - Arguments to find a Roles
   * @example
   * // Get one Roles
   * const roles = await prisma.roles.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends rolesFindFirstArgs>(args?: Prisma.SelectSubset<T, rolesFindFirstArgs<ExtArgs>>): Prisma.Prisma__rolesClient<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Roles that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rolesFindFirstOrThrowArgs} args - Arguments to find a Roles
   * @example
   * // Get one Roles
   * const roles = await prisma.roles.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends rolesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, rolesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__rolesClient<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Roles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rolesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Roles
   * const roles = await prisma.roles.findMany()
   * 
   * // Get first 10 Roles
   * const roles = await prisma.roles.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends rolesFindManyArgs>(args?: Prisma.SelectSubset<T, rolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Roles.
   * @param {rolesCreateArgs} args - Arguments to create a Roles.
   * @example
   * // Create one Roles
   * const Roles = await prisma.roles.create({
   *   data: {
   *     // ... data to create a Roles
   *   }
   * })
   * 
   */
  create<T extends rolesCreateArgs>(args: Prisma.SelectSubset<T, rolesCreateArgs<ExtArgs>>): Prisma.Prisma__rolesClient<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Roles.
   * @param {rolesCreateManyArgs} args - Arguments to create many Roles.
   * @example
   * // Create many Roles
   * const roles = await prisma.roles.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends rolesCreateManyArgs>(args?: Prisma.SelectSubset<T, rolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Roles and returns the data saved in the database.
   * @param {rolesCreateManyAndReturnArgs} args - Arguments to create many Roles.
   * @example
   * // Create many Roles
   * const roles = await prisma.roles.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Roles and only return the `id`
   * const rolesWithIdOnly = await prisma.roles.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends rolesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, rolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Roles.
   * @param {rolesDeleteArgs} args - Arguments to delete one Roles.
   * @example
   * // Delete one Roles
   * const Roles = await prisma.roles.delete({
   *   where: {
   *     // ... filter to delete one Roles
   *   }
   * })
   * 
   */
  delete<T extends rolesDeleteArgs>(args: Prisma.SelectSubset<T, rolesDeleteArgs<ExtArgs>>): Prisma.Prisma__rolesClient<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Roles.
   * @param {rolesUpdateArgs} args - Arguments to update one Roles.
   * @example
   * // Update one Roles
   * const roles = await prisma.roles.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends rolesUpdateArgs>(args: Prisma.SelectSubset<T, rolesUpdateArgs<ExtArgs>>): Prisma.Prisma__rolesClient<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Roles.
   * @param {rolesDeleteManyArgs} args - Arguments to filter Roles to delete.
   * @example
   * // Delete a few Roles
   * const { count } = await prisma.roles.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends rolesDeleteManyArgs>(args?: Prisma.SelectSubset<T, rolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rolesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Roles
   * const roles = await prisma.roles.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends rolesUpdateManyArgs>(args: Prisma.SelectSubset<T, rolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Roles and returns the data updated in the database.
   * @param {rolesUpdateManyAndReturnArgs} args - Arguments to update many Roles.
   * @example
   * // Update many Roles
   * const roles = await prisma.roles.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Roles and only return the `id`
   * const rolesWithIdOnly = await prisma.roles.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends rolesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, rolesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Roles.
   * @param {rolesUpsertArgs} args - Arguments to update or create a Roles.
   * @example
   * // Update or create a Roles
   * const roles = await prisma.roles.upsert({
   *   create: {
   *     // ... data to create a Roles
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Roles we want to update
   *   }
   * })
   */
  upsert<T extends rolesUpsertArgs>(args: Prisma.SelectSubset<T, rolesUpsertArgs<ExtArgs>>): Prisma.Prisma__rolesClient<runtime.Types.Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rolesCountArgs} args - Arguments to filter Roles to count.
   * @example
   * // Count the number of Roles
   * const count = await prisma.roles.count({
   *   where: {
   *     // ... the filter for the Roles we want to count
   *   }
   * })
  **/
  count<T extends rolesCountArgs>(
    args?: Prisma.Subset<T, rolesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RolesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RolesAggregateArgs>(args: Prisma.Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

  /**
   * Group by Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rolesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends rolesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: rolesGroupByArgs['orderBy'] }
      : { orderBy?: rolesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, rolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the roles model
 */
readonly fields: rolesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for roles.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__rolesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.roles$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.roles$userArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the roles model
 */
export interface rolesFieldRefs {
  readonly id: Prisma.FieldRef<"roles", 'BigInt'>
  readonly name: Prisma.FieldRef<"roles", 'String'>
}
    

// Custom InputTypes
/**
 * roles findUnique
 */
export type rolesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * Filter, which roles to fetch.
   */
  where: Prisma.rolesWhereUniqueInput
}

/**
 * roles findUniqueOrThrow
 */
export type rolesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * Filter, which roles to fetch.
   */
  where: Prisma.rolesWhereUniqueInput
}

/**
 * roles findFirst
 */
export type rolesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * Filter, which roles to fetch.
   */
  where?: Prisma.rolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of roles to fetch.
   */
  orderBy?: Prisma.rolesOrderByWithRelationInput | Prisma.rolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for roles.
   */
  cursor?: Prisma.rolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of roles.
   */
  distinct?: Prisma.RolesScalarFieldEnum | Prisma.RolesScalarFieldEnum[]
}

/**
 * roles findFirstOrThrow
 */
export type rolesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * Filter, which roles to fetch.
   */
  where?: Prisma.rolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of roles to fetch.
   */
  orderBy?: Prisma.rolesOrderByWithRelationInput | Prisma.rolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for roles.
   */
  cursor?: Prisma.rolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of roles.
   */
  distinct?: Prisma.RolesScalarFieldEnum | Prisma.RolesScalarFieldEnum[]
}

/**
 * roles findMany
 */
export type rolesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * Filter, which roles to fetch.
   */
  where?: Prisma.rolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of roles to fetch.
   */
  orderBy?: Prisma.rolesOrderByWithRelationInput | Prisma.rolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing roles.
   */
  cursor?: Prisma.rolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` roles.
   */
  skip?: number
  distinct?: Prisma.RolesScalarFieldEnum | Prisma.RolesScalarFieldEnum[]
}

/**
 * roles create
 */
export type rolesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * The data needed to create a roles.
   */
  data: Prisma.XOR<Prisma.rolesCreateInput, Prisma.rolesUncheckedCreateInput>
}

/**
 * roles createMany
 */
export type rolesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many roles.
   */
  data: Prisma.rolesCreateManyInput | Prisma.rolesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * roles createManyAndReturn
 */
export type rolesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * The data used to create many roles.
   */
  data: Prisma.rolesCreateManyInput | Prisma.rolesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * roles update
 */
export type rolesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * The data needed to update a roles.
   */
  data: Prisma.XOR<Prisma.rolesUpdateInput, Prisma.rolesUncheckedUpdateInput>
  /**
   * Choose, which roles to update.
   */
  where: Prisma.rolesWhereUniqueInput
}

/**
 * roles updateMany
 */
export type rolesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update roles.
   */
  data: Prisma.XOR<Prisma.rolesUpdateManyMutationInput, Prisma.rolesUncheckedUpdateManyInput>
  /**
   * Filter which roles to update
   */
  where?: Prisma.rolesWhereInput
  /**
   * Limit how many roles to update.
   */
  limit?: number
}

/**
 * roles updateManyAndReturn
 */
export type rolesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * The data used to update roles.
   */
  data: Prisma.XOR<Prisma.rolesUpdateManyMutationInput, Prisma.rolesUncheckedUpdateManyInput>
  /**
   * Filter which roles to update
   */
  where?: Prisma.rolesWhereInput
  /**
   * Limit how many roles to update.
   */
  limit?: number
}

/**
 * roles upsert
 */
export type rolesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * The filter to search for the roles to update in case it exists.
   */
  where: Prisma.rolesWhereUniqueInput
  /**
   * In case the roles found by the `where` argument doesn't exist, create a new roles with this data.
   */
  create: Prisma.XOR<Prisma.rolesCreateInput, Prisma.rolesUncheckedCreateInput>
  /**
   * In case the roles was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.rolesUpdateInput, Prisma.rolesUncheckedUpdateInput>
}

/**
 * roles delete
 */
export type rolesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
  /**
   * Filter which roles to delete.
   */
  where: Prisma.rolesWhereUniqueInput
}

/**
 * roles deleteMany
 */
export type rolesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which roles to delete
   */
  where?: Prisma.rolesWhereInput
  /**
   * Limit how many roles to delete.
   */
  limit?: number
}

/**
 * roles.user
 */
export type roles$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the users
   */
  select?: Prisma.usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the users
   */
  omit?: Prisma.usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.usersInclude<ExtArgs> | null
  where?: Prisma.usersWhereInput
  orderBy?: Prisma.usersOrderByWithRelationInput | Prisma.usersOrderByWithRelationInput[]
  cursor?: Prisma.usersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UsersScalarFieldEnum | Prisma.UsersScalarFieldEnum[]
}

/**
 * roles without action
 */
export type rolesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the roles
   */
  select?: Prisma.rolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the roles
   */
  omit?: Prisma.rolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.rolesInclude<ExtArgs> | null
}
