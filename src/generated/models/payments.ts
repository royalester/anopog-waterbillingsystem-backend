
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `payments` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model payments
 * 
 */
export type paymentsModel = runtime.Types.Result.DefaultSelection<Prisma.$paymentsPayload>

export type AggregatePayments = {
  _count: PaymentsCountAggregateOutputType | null
  _avg: PaymentsAvgAggregateOutputType | null
  _sum: PaymentsSumAggregateOutputType | null
  _min: PaymentsMinAggregateOutputType | null
  _max: PaymentsMaxAggregateOutputType | null
}

export type PaymentsAvgAggregateOutputType = {
  id: number | null
  bill_id: number | null
  amount_paid: runtime.Decimal | null
}

export type PaymentsSumAggregateOutputType = {
  id: bigint | null
  bill_id: bigint | null
  amount_paid: runtime.Decimal | null
}

export type PaymentsMinAggregateOutputType = {
  id: bigint | null
  bill_id: bigint | null
  payment_date: Date | null
  payment_method: string | null
  amount_paid: runtime.Decimal | null
}

export type PaymentsMaxAggregateOutputType = {
  id: bigint | null
  bill_id: bigint | null
  payment_date: Date | null
  payment_method: string | null
  amount_paid: runtime.Decimal | null
}

export type PaymentsCountAggregateOutputType = {
  id: number
  bill_id: number
  payment_date: number
  payment_method: number
  amount_paid: number
  _all: number
}


export type PaymentsAvgAggregateInputType = {
  id?: true
  bill_id?: true
  amount_paid?: true
}

export type PaymentsSumAggregateInputType = {
  id?: true
  bill_id?: true
  amount_paid?: true
}

export type PaymentsMinAggregateInputType = {
  id?: true
  bill_id?: true
  payment_date?: true
  payment_method?: true
  amount_paid?: true
}

export type PaymentsMaxAggregateInputType = {
  id?: true
  bill_id?: true
  payment_date?: true
  payment_method?: true
  amount_paid?: true
}

export type PaymentsCountAggregateInputType = {
  id?: true
  bill_id?: true
  payment_date?: true
  payment_method?: true
  amount_paid?: true
  _all?: true
}

export type PaymentsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which payments to aggregate.
   */
  where?: Prisma.paymentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payments to fetch.
   */
  orderBy?: Prisma.paymentsOrderByWithRelationInput | Prisma.paymentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.paymentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned payments
  **/
  _count?: true | PaymentsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PaymentsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PaymentsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PaymentsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PaymentsMaxAggregateInputType
}

export type GetPaymentsAggregateType<T extends PaymentsAggregateArgs> = {
      [P in keyof T & keyof AggregatePayments]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePayments[P]>
    : Prisma.GetScalarType<T[P], AggregatePayments[P]>
}




export type paymentsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.paymentsWhereInput
  orderBy?: Prisma.paymentsOrderByWithAggregationInput | Prisma.paymentsOrderByWithAggregationInput[]
  by: Prisma.PaymentsScalarFieldEnum[] | Prisma.PaymentsScalarFieldEnum
  having?: Prisma.paymentsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PaymentsCountAggregateInputType | true
  _avg?: PaymentsAvgAggregateInputType
  _sum?: PaymentsSumAggregateInputType
  _min?: PaymentsMinAggregateInputType
  _max?: PaymentsMaxAggregateInputType
}

export type PaymentsGroupByOutputType = {
  id: bigint
  bill_id: bigint
  payment_date: Date
  payment_method: string
  amount_paid: runtime.Decimal
  _count: PaymentsCountAggregateOutputType | null
  _avg: PaymentsAvgAggregateOutputType | null
  _sum: PaymentsSumAggregateOutputType | null
  _min: PaymentsMinAggregateOutputType | null
  _max: PaymentsMaxAggregateOutputType | null
}

type GetPaymentsGroupByPayload<T extends paymentsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PaymentsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PaymentsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PaymentsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PaymentsGroupByOutputType[P]>
      }
    >
  >



export type paymentsWhereInput = {
  AND?: Prisma.paymentsWhereInput | Prisma.paymentsWhereInput[]
  OR?: Prisma.paymentsWhereInput[]
  NOT?: Prisma.paymentsWhereInput | Prisma.paymentsWhereInput[]
  id?: Prisma.BigIntFilter<"payments"> | bigint | number
  bill_id?: Prisma.BigIntFilter<"payments"> | bigint | number
  payment_date?: Prisma.DateTimeFilter<"payments"> | Date | string
  payment_method?: Prisma.StringFilter<"payments"> | string
  amount_paid?: Prisma.DecimalFilter<"payments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  bill?: Prisma.XOR<Prisma.BillsScalarRelationFilter, Prisma.billsWhereInput>
}

export type paymentsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  bill_id?: Prisma.SortOrder
  payment_date?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  amount_paid?: Prisma.SortOrder
  bill?: Prisma.billsOrderByWithRelationInput
}

export type paymentsWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.paymentsWhereInput | Prisma.paymentsWhereInput[]
  OR?: Prisma.paymentsWhereInput[]
  NOT?: Prisma.paymentsWhereInput | Prisma.paymentsWhereInput[]
  bill_id?: Prisma.BigIntFilter<"payments"> | bigint | number
  payment_date?: Prisma.DateTimeFilter<"payments"> | Date | string
  payment_method?: Prisma.StringFilter<"payments"> | string
  amount_paid?: Prisma.DecimalFilter<"payments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  bill?: Prisma.XOR<Prisma.BillsScalarRelationFilter, Prisma.billsWhereInput>
}, "id">

export type paymentsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  bill_id?: Prisma.SortOrder
  payment_date?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  amount_paid?: Prisma.SortOrder
  _count?: Prisma.paymentsCountOrderByAggregateInput
  _avg?: Prisma.paymentsAvgOrderByAggregateInput
  _max?: Prisma.paymentsMaxOrderByAggregateInput
  _min?: Prisma.paymentsMinOrderByAggregateInput
  _sum?: Prisma.paymentsSumOrderByAggregateInput
}

export type paymentsScalarWhereWithAggregatesInput = {
  AND?: Prisma.paymentsScalarWhereWithAggregatesInput | Prisma.paymentsScalarWhereWithAggregatesInput[]
  OR?: Prisma.paymentsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.paymentsScalarWhereWithAggregatesInput | Prisma.paymentsScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"payments"> | bigint | number
  bill_id?: Prisma.BigIntWithAggregatesFilter<"payments"> | bigint | number
  payment_date?: Prisma.DateTimeWithAggregatesFilter<"payments"> | Date | string
  payment_method?: Prisma.StringWithAggregatesFilter<"payments"> | string
  amount_paid?: Prisma.DecimalWithAggregatesFilter<"payments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsCreateInput = {
  id?: bigint | number
  payment_date: Date | string
  payment_method: string
  amount_paid: runtime.Decimal | runtime.DecimalJsLike | number | string
  bill: Prisma.billsCreateNestedOneWithoutPaymentsInput
}

export type paymentsUncheckedCreateInput = {
  id?: bigint | number
  bill_id: bigint | number
  payment_date: Date | string
  payment_method: string
  amount_paid: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  payment_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  amount_paid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  bill?: Prisma.billsUpdateOneRequiredWithoutPaymentsNestedInput
}

export type paymentsUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  bill_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  payment_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  amount_paid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsCreateManyInput = {
  id?: bigint | number
  bill_id: bigint | number
  payment_date: Date | string
  payment_method: string
  amount_paid: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  payment_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  amount_paid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  bill_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  payment_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  amount_paid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PaymentsListRelationFilter = {
  every?: Prisma.paymentsWhereInput
  some?: Prisma.paymentsWhereInput
  none?: Prisma.paymentsWhereInput
}

export type paymentsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type paymentsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bill_id?: Prisma.SortOrder
  payment_date?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  amount_paid?: Prisma.SortOrder
}

export type paymentsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bill_id?: Prisma.SortOrder
  amount_paid?: Prisma.SortOrder
}

export type paymentsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bill_id?: Prisma.SortOrder
  payment_date?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  amount_paid?: Prisma.SortOrder
}

export type paymentsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bill_id?: Prisma.SortOrder
  payment_date?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  amount_paid?: Prisma.SortOrder
}

export type paymentsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  bill_id?: Prisma.SortOrder
  amount_paid?: Prisma.SortOrder
}

export type paymentsCreateNestedManyWithoutBillInput = {
  create?: Prisma.XOR<Prisma.paymentsCreateWithoutBillInput, Prisma.paymentsUncheckedCreateWithoutBillInput> | Prisma.paymentsCreateWithoutBillInput[] | Prisma.paymentsUncheckedCreateWithoutBillInput[]
  connectOrCreate?: Prisma.paymentsCreateOrConnectWithoutBillInput | Prisma.paymentsCreateOrConnectWithoutBillInput[]
  createMany?: Prisma.paymentsCreateManyBillInputEnvelope
  connect?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
}

export type paymentsUncheckedCreateNestedManyWithoutBillInput = {
  create?: Prisma.XOR<Prisma.paymentsCreateWithoutBillInput, Prisma.paymentsUncheckedCreateWithoutBillInput> | Prisma.paymentsCreateWithoutBillInput[] | Prisma.paymentsUncheckedCreateWithoutBillInput[]
  connectOrCreate?: Prisma.paymentsCreateOrConnectWithoutBillInput | Prisma.paymentsCreateOrConnectWithoutBillInput[]
  createMany?: Prisma.paymentsCreateManyBillInputEnvelope
  connect?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
}

export type paymentsUpdateManyWithoutBillNestedInput = {
  create?: Prisma.XOR<Prisma.paymentsCreateWithoutBillInput, Prisma.paymentsUncheckedCreateWithoutBillInput> | Prisma.paymentsCreateWithoutBillInput[] | Prisma.paymentsUncheckedCreateWithoutBillInput[]
  connectOrCreate?: Prisma.paymentsCreateOrConnectWithoutBillInput | Prisma.paymentsCreateOrConnectWithoutBillInput[]
  upsert?: Prisma.paymentsUpsertWithWhereUniqueWithoutBillInput | Prisma.paymentsUpsertWithWhereUniqueWithoutBillInput[]
  createMany?: Prisma.paymentsCreateManyBillInputEnvelope
  set?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
  disconnect?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
  delete?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
  connect?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
  update?: Prisma.paymentsUpdateWithWhereUniqueWithoutBillInput | Prisma.paymentsUpdateWithWhereUniqueWithoutBillInput[]
  updateMany?: Prisma.paymentsUpdateManyWithWhereWithoutBillInput | Prisma.paymentsUpdateManyWithWhereWithoutBillInput[]
  deleteMany?: Prisma.paymentsScalarWhereInput | Prisma.paymentsScalarWhereInput[]
}

export type paymentsUncheckedUpdateManyWithoutBillNestedInput = {
  create?: Prisma.XOR<Prisma.paymentsCreateWithoutBillInput, Prisma.paymentsUncheckedCreateWithoutBillInput> | Prisma.paymentsCreateWithoutBillInput[] | Prisma.paymentsUncheckedCreateWithoutBillInput[]
  connectOrCreate?: Prisma.paymentsCreateOrConnectWithoutBillInput | Prisma.paymentsCreateOrConnectWithoutBillInput[]
  upsert?: Prisma.paymentsUpsertWithWhereUniqueWithoutBillInput | Prisma.paymentsUpsertWithWhereUniqueWithoutBillInput[]
  createMany?: Prisma.paymentsCreateManyBillInputEnvelope
  set?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
  disconnect?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
  delete?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
  connect?: Prisma.paymentsWhereUniqueInput | Prisma.paymentsWhereUniqueInput[]
  update?: Prisma.paymentsUpdateWithWhereUniqueWithoutBillInput | Prisma.paymentsUpdateWithWhereUniqueWithoutBillInput[]
  updateMany?: Prisma.paymentsUpdateManyWithWhereWithoutBillInput | Prisma.paymentsUpdateManyWithWhereWithoutBillInput[]
  deleteMany?: Prisma.paymentsScalarWhereInput | Prisma.paymentsScalarWhereInput[]
}

export type paymentsCreateWithoutBillInput = {
  id?: bigint | number
  payment_date: Date | string
  payment_method: string
  amount_paid: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsUncheckedCreateWithoutBillInput = {
  id?: bigint | number
  payment_date: Date | string
  payment_method: string
  amount_paid: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsCreateOrConnectWithoutBillInput = {
  where: Prisma.paymentsWhereUniqueInput
  create: Prisma.XOR<Prisma.paymentsCreateWithoutBillInput, Prisma.paymentsUncheckedCreateWithoutBillInput>
}

export type paymentsCreateManyBillInputEnvelope = {
  data: Prisma.paymentsCreateManyBillInput | Prisma.paymentsCreateManyBillInput[]
  skipDuplicates?: boolean
}

export type paymentsUpsertWithWhereUniqueWithoutBillInput = {
  where: Prisma.paymentsWhereUniqueInput
  update: Prisma.XOR<Prisma.paymentsUpdateWithoutBillInput, Prisma.paymentsUncheckedUpdateWithoutBillInput>
  create: Prisma.XOR<Prisma.paymentsCreateWithoutBillInput, Prisma.paymentsUncheckedCreateWithoutBillInput>
}

export type paymentsUpdateWithWhereUniqueWithoutBillInput = {
  where: Prisma.paymentsWhereUniqueInput
  data: Prisma.XOR<Prisma.paymentsUpdateWithoutBillInput, Prisma.paymentsUncheckedUpdateWithoutBillInput>
}

export type paymentsUpdateManyWithWhereWithoutBillInput = {
  where: Prisma.paymentsScalarWhereInput
  data: Prisma.XOR<Prisma.paymentsUpdateManyMutationInput, Prisma.paymentsUncheckedUpdateManyWithoutBillInput>
}

export type paymentsScalarWhereInput = {
  AND?: Prisma.paymentsScalarWhereInput | Prisma.paymentsScalarWhereInput[]
  OR?: Prisma.paymentsScalarWhereInput[]
  NOT?: Prisma.paymentsScalarWhereInput | Prisma.paymentsScalarWhereInput[]
  id?: Prisma.BigIntFilter<"payments"> | bigint | number
  bill_id?: Prisma.BigIntFilter<"payments"> | bigint | number
  payment_date?: Prisma.DateTimeFilter<"payments"> | Date | string
  payment_method?: Prisma.StringFilter<"payments"> | string
  amount_paid?: Prisma.DecimalFilter<"payments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsCreateManyBillInput = {
  id?: bigint | number
  payment_date: Date | string
  payment_method: string
  amount_paid: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsUpdateWithoutBillInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  payment_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  amount_paid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsUncheckedUpdateWithoutBillInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  payment_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  amount_paid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type paymentsUncheckedUpdateManyWithoutBillInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  payment_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  amount_paid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}



export type paymentsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bill_id?: boolean
  payment_date?: boolean
  payment_method?: boolean
  amount_paid?: boolean
  bill?: boolean | Prisma.billsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["payments"]>

export type paymentsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bill_id?: boolean
  payment_date?: boolean
  payment_method?: boolean
  amount_paid?: boolean
  bill?: boolean | Prisma.billsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["payments"]>

export type paymentsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  bill_id?: boolean
  payment_date?: boolean
  payment_method?: boolean
  amount_paid?: boolean
  bill?: boolean | Prisma.billsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["payments"]>

export type paymentsSelectScalar = {
  id?: boolean
  bill_id?: boolean
  payment_date?: boolean
  payment_method?: boolean
  amount_paid?: boolean
}

export type paymentsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "bill_id" | "payment_date" | "payment_method" | "amount_paid", ExtArgs["result"]["payments"]>
export type paymentsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bill?: boolean | Prisma.billsDefaultArgs<ExtArgs>
}
export type paymentsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bill?: boolean | Prisma.billsDefaultArgs<ExtArgs>
}
export type paymentsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bill?: boolean | Prisma.billsDefaultArgs<ExtArgs>
}

export type $paymentsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "payments"
  objects: {
    bill: Prisma.$billsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    bill_id: bigint
    payment_date: Date
    payment_method: string
    amount_paid: runtime.Decimal
  }, ExtArgs["result"]["payments"]>
  composites: {}
}

export type paymentsGetPayload<S extends boolean | null | undefined | paymentsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$paymentsPayload, S>

export type paymentsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<paymentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentsCountAggregateInputType | true
  }

export interface paymentsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payments'], meta: { name: 'payments' } }
  /**
   * Find zero or one Payments that matches the filter.
   * @param {paymentsFindUniqueArgs} args - Arguments to find a Payments
   * @example
   * // Get one Payments
   * const payments = await prisma.payments.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends paymentsFindUniqueArgs>(args: Prisma.SelectSubset<T, paymentsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__paymentsClient<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Payments that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {paymentsFindUniqueOrThrowArgs} args - Arguments to find a Payments
   * @example
   * // Get one Payments
   * const payments = await prisma.payments.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends paymentsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, paymentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__paymentsClient<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Payments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {paymentsFindFirstArgs} args - Arguments to find a Payments
   * @example
   * // Get one Payments
   * const payments = await prisma.payments.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends paymentsFindFirstArgs>(args?: Prisma.SelectSubset<T, paymentsFindFirstArgs<ExtArgs>>): Prisma.Prisma__paymentsClient<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Payments that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {paymentsFindFirstOrThrowArgs} args - Arguments to find a Payments
   * @example
   * // Get one Payments
   * const payments = await prisma.payments.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends paymentsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, paymentsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__paymentsClient<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Payments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {paymentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Payments
   * const payments = await prisma.payments.findMany()
   * 
   * // Get first 10 Payments
   * const payments = await prisma.payments.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const paymentsWithIdOnly = await prisma.payments.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends paymentsFindManyArgs>(args?: Prisma.SelectSubset<T, paymentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Payments.
   * @param {paymentsCreateArgs} args - Arguments to create a Payments.
   * @example
   * // Create one Payments
   * const Payments = await prisma.payments.create({
   *   data: {
   *     // ... data to create a Payments
   *   }
   * })
   * 
   */
  create<T extends paymentsCreateArgs>(args: Prisma.SelectSubset<T, paymentsCreateArgs<ExtArgs>>): Prisma.Prisma__paymentsClient<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Payments.
   * @param {paymentsCreateManyArgs} args - Arguments to create many Payments.
   * @example
   * // Create many Payments
   * const payments = await prisma.payments.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends paymentsCreateManyArgs>(args?: Prisma.SelectSubset<T, paymentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Payments and returns the data saved in the database.
   * @param {paymentsCreateManyAndReturnArgs} args - Arguments to create many Payments.
   * @example
   * // Create many Payments
   * const payments = await prisma.payments.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Payments and only return the `id`
   * const paymentsWithIdOnly = await prisma.payments.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends paymentsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, paymentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Payments.
   * @param {paymentsDeleteArgs} args - Arguments to delete one Payments.
   * @example
   * // Delete one Payments
   * const Payments = await prisma.payments.delete({
   *   where: {
   *     // ... filter to delete one Payments
   *   }
   * })
   * 
   */
  delete<T extends paymentsDeleteArgs>(args: Prisma.SelectSubset<T, paymentsDeleteArgs<ExtArgs>>): Prisma.Prisma__paymentsClient<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Payments.
   * @param {paymentsUpdateArgs} args - Arguments to update one Payments.
   * @example
   * // Update one Payments
   * const payments = await prisma.payments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends paymentsUpdateArgs>(args: Prisma.SelectSubset<T, paymentsUpdateArgs<ExtArgs>>): Prisma.Prisma__paymentsClient<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Payments.
   * @param {paymentsDeleteManyArgs} args - Arguments to filter Payments to delete.
   * @example
   * // Delete a few Payments
   * const { count } = await prisma.payments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends paymentsDeleteManyArgs>(args?: Prisma.SelectSubset<T, paymentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Payments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {paymentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Payments
   * const payments = await prisma.payments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends paymentsUpdateManyArgs>(args: Prisma.SelectSubset<T, paymentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Payments and returns the data updated in the database.
   * @param {paymentsUpdateManyAndReturnArgs} args - Arguments to update many Payments.
   * @example
   * // Update many Payments
   * const payments = await prisma.payments.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Payments and only return the `id`
   * const paymentsWithIdOnly = await prisma.payments.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends paymentsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, paymentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Payments.
   * @param {paymentsUpsertArgs} args - Arguments to update or create a Payments.
   * @example
   * // Update or create a Payments
   * const payments = await prisma.payments.upsert({
   *   create: {
   *     // ... data to create a Payments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Payments we want to update
   *   }
   * })
   */
  upsert<T extends paymentsUpsertArgs>(args: Prisma.SelectSubset<T, paymentsUpsertArgs<ExtArgs>>): Prisma.Prisma__paymentsClient<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Payments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {paymentsCountArgs} args - Arguments to filter Payments to count.
   * @example
   * // Count the number of Payments
   * const count = await prisma.payments.count({
   *   where: {
   *     // ... the filter for the Payments we want to count
   *   }
   * })
  **/
  count<T extends paymentsCountArgs>(
    args?: Prisma.Subset<T, paymentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PaymentsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Payments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PaymentsAggregateArgs>(args: Prisma.Subset<T, PaymentsAggregateArgs>): Prisma.PrismaPromise<GetPaymentsAggregateType<T>>

  /**
   * Group by Payments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {paymentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends paymentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: paymentsGroupByArgs['orderBy'] }
      : { orderBy?: paymentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, paymentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the payments model
 */
readonly fields: paymentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for payments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__paymentsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  bill<T extends Prisma.billsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.billsDefaultArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the payments model
 */
export interface paymentsFieldRefs {
  readonly id: Prisma.FieldRef<"payments", 'BigInt'>
  readonly bill_id: Prisma.FieldRef<"payments", 'BigInt'>
  readonly payment_date: Prisma.FieldRef<"payments", 'DateTime'>
  readonly payment_method: Prisma.FieldRef<"payments", 'String'>
  readonly amount_paid: Prisma.FieldRef<"payments", 'Decimal'>
}
    

// Custom InputTypes
/**
 * payments findUnique
 */
export type paymentsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * Filter, which payments to fetch.
   */
  where: Prisma.paymentsWhereUniqueInput
}

/**
 * payments findUniqueOrThrow
 */
export type paymentsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * Filter, which payments to fetch.
   */
  where: Prisma.paymentsWhereUniqueInput
}

/**
 * payments findFirst
 */
export type paymentsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * Filter, which payments to fetch.
   */
  where?: Prisma.paymentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payments to fetch.
   */
  orderBy?: Prisma.paymentsOrderByWithRelationInput | Prisma.paymentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for payments.
   */
  cursor?: Prisma.paymentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of payments.
   */
  distinct?: Prisma.PaymentsScalarFieldEnum | Prisma.PaymentsScalarFieldEnum[]
}

/**
 * payments findFirstOrThrow
 */
export type paymentsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * Filter, which payments to fetch.
   */
  where?: Prisma.paymentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payments to fetch.
   */
  orderBy?: Prisma.paymentsOrderByWithRelationInput | Prisma.paymentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for payments.
   */
  cursor?: Prisma.paymentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of payments.
   */
  distinct?: Prisma.PaymentsScalarFieldEnum | Prisma.PaymentsScalarFieldEnum[]
}

/**
 * payments findMany
 */
export type paymentsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * Filter, which payments to fetch.
   */
  where?: Prisma.paymentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payments to fetch.
   */
  orderBy?: Prisma.paymentsOrderByWithRelationInput | Prisma.paymentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing payments.
   */
  cursor?: Prisma.paymentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payments.
   */
  skip?: number
  distinct?: Prisma.PaymentsScalarFieldEnum | Prisma.PaymentsScalarFieldEnum[]
}

/**
 * payments create
 */
export type paymentsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * The data needed to create a payments.
   */
  data: Prisma.XOR<Prisma.paymentsCreateInput, Prisma.paymentsUncheckedCreateInput>
}

/**
 * payments createMany
 */
export type paymentsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many payments.
   */
  data: Prisma.paymentsCreateManyInput | Prisma.paymentsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * payments createManyAndReturn
 */
export type paymentsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * The data used to create many payments.
   */
  data: Prisma.paymentsCreateManyInput | Prisma.paymentsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * payments update
 */
export type paymentsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * The data needed to update a payments.
   */
  data: Prisma.XOR<Prisma.paymentsUpdateInput, Prisma.paymentsUncheckedUpdateInput>
  /**
   * Choose, which payments to update.
   */
  where: Prisma.paymentsWhereUniqueInput
}

/**
 * payments updateMany
 */
export type paymentsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update payments.
   */
  data: Prisma.XOR<Prisma.paymentsUpdateManyMutationInput, Prisma.paymentsUncheckedUpdateManyInput>
  /**
   * Filter which payments to update
   */
  where?: Prisma.paymentsWhereInput
  /**
   * Limit how many payments to update.
   */
  limit?: number
}

/**
 * payments updateManyAndReturn
 */
export type paymentsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * The data used to update payments.
   */
  data: Prisma.XOR<Prisma.paymentsUpdateManyMutationInput, Prisma.paymentsUncheckedUpdateManyInput>
  /**
   * Filter which payments to update
   */
  where?: Prisma.paymentsWhereInput
  /**
   * Limit how many payments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * payments upsert
 */
export type paymentsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * The filter to search for the payments to update in case it exists.
   */
  where: Prisma.paymentsWhereUniqueInput
  /**
   * In case the payments found by the `where` argument doesn't exist, create a new payments with this data.
   */
  create: Prisma.XOR<Prisma.paymentsCreateInput, Prisma.paymentsUncheckedCreateInput>
  /**
   * In case the payments was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.paymentsUpdateInput, Prisma.paymentsUncheckedUpdateInput>
}

/**
 * payments delete
 */
export type paymentsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  /**
   * Filter which payments to delete.
   */
  where: Prisma.paymentsWhereUniqueInput
}

/**
 * payments deleteMany
 */
export type paymentsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which payments to delete
   */
  where?: Prisma.paymentsWhereInput
  /**
   * Limit how many payments to delete.
   */
  limit?: number
}

/**
 * payments without action
 */
export type paymentsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
}
