
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `bills` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model bills
 * 
 */
export type billsModel = runtime.Types.Result.DefaultSelection<Prisma.$billsPayload>

export type AggregateBills = {
  _count: BillsCountAggregateOutputType | null
  _avg: BillsAvgAggregateOutputType | null
  _sum: BillsSumAggregateOutputType | null
  _min: BillsMinAggregateOutputType | null
  _max: BillsMaxAggregateOutputType | null
}

export type BillsAvgAggregateOutputType = {
  id: number | null
  user_id: number | null
  meter_reading_id: number | null
  amount_due: runtime.Decimal | null
}

export type BillsSumAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  meter_reading_id: bigint | null
  amount_due: runtime.Decimal | null
}

export type BillsMinAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  meter_reading_id: bigint | null
  amount_due: runtime.Decimal | null
  due_date: Date | null
  is_paid: boolean | null
}

export type BillsMaxAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  meter_reading_id: bigint | null
  amount_due: runtime.Decimal | null
  due_date: Date | null
  is_paid: boolean | null
}

export type BillsCountAggregateOutputType = {
  id: number
  user_id: number
  meter_reading_id: number
  amount_due: number
  due_date: number
  is_paid: number
  _all: number
}


export type BillsAvgAggregateInputType = {
  id?: true
  user_id?: true
  meter_reading_id?: true
  amount_due?: true
}

export type BillsSumAggregateInputType = {
  id?: true
  user_id?: true
  meter_reading_id?: true
  amount_due?: true
}

export type BillsMinAggregateInputType = {
  id?: true
  user_id?: true
  meter_reading_id?: true
  amount_due?: true
  due_date?: true
  is_paid?: true
}

export type BillsMaxAggregateInputType = {
  id?: true
  user_id?: true
  meter_reading_id?: true
  amount_due?: true
  due_date?: true
  is_paid?: true
}

export type BillsCountAggregateInputType = {
  id?: true
  user_id?: true
  meter_reading_id?: true
  amount_due?: true
  due_date?: true
  is_paid?: true
  _all?: true
}

export type BillsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which bills to aggregate.
   */
  where?: Prisma.billsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bills to fetch.
   */
  orderBy?: Prisma.billsOrderByWithRelationInput | Prisma.billsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.billsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned bills
  **/
  _count?: true | BillsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BillsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BillsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BillsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BillsMaxAggregateInputType
}

export type GetBillsAggregateType<T extends BillsAggregateArgs> = {
      [P in keyof T & keyof AggregateBills]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBills[P]>
    : Prisma.GetScalarType<T[P], AggregateBills[P]>
}




export type billsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.billsWhereInput
  orderBy?: Prisma.billsOrderByWithAggregationInput | Prisma.billsOrderByWithAggregationInput[]
  by: Prisma.BillsScalarFieldEnum[] | Prisma.BillsScalarFieldEnum
  having?: Prisma.billsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BillsCountAggregateInputType | true
  _avg?: BillsAvgAggregateInputType
  _sum?: BillsSumAggregateInputType
  _min?: BillsMinAggregateInputType
  _max?: BillsMaxAggregateInputType
}

export type BillsGroupByOutputType = {
  id: bigint
  user_id: bigint
  meter_reading_id: bigint
  amount_due: runtime.Decimal
  due_date: Date
  is_paid: boolean | null
  _count: BillsCountAggregateOutputType | null
  _avg: BillsAvgAggregateOutputType | null
  _sum: BillsSumAggregateOutputType | null
  _min: BillsMinAggregateOutputType | null
  _max: BillsMaxAggregateOutputType | null
}

type GetBillsGroupByPayload<T extends billsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BillsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BillsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BillsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BillsGroupByOutputType[P]>
      }
    >
  >



export type billsWhereInput = {
  AND?: Prisma.billsWhereInput | Prisma.billsWhereInput[]
  OR?: Prisma.billsWhereInput[]
  NOT?: Prisma.billsWhereInput | Prisma.billsWhereInput[]
  id?: Prisma.BigIntFilter<"bills"> | bigint | number
  user_id?: Prisma.BigIntFilter<"bills"> | bigint | number
  meter_reading_id?: Prisma.BigIntFilter<"bills"> | bigint | number
  amount_due?: Prisma.DecimalFilter<"bills"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFilter<"bills"> | Date | string
  is_paid?: Prisma.BoolNullableFilter<"bills"> | boolean | null
  meter_reading?: Prisma.XOR<Prisma.Meter_readingsScalarRelationFilter, Prisma.meter_readingsWhereInput>
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
  payments?: Prisma.PaymentsListRelationFilter
}

export type billsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  meter_reading_id?: Prisma.SortOrder
  amount_due?: Prisma.SortOrder
  due_date?: Prisma.SortOrder
  is_paid?: Prisma.SortOrderInput | Prisma.SortOrder
  meter_reading?: Prisma.meter_readingsOrderByWithRelationInput
  user?: Prisma.usersOrderByWithRelationInput
  payments?: Prisma.paymentsOrderByRelationAggregateInput
}

export type billsWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.billsWhereInput | Prisma.billsWhereInput[]
  OR?: Prisma.billsWhereInput[]
  NOT?: Prisma.billsWhereInput | Prisma.billsWhereInput[]
  user_id?: Prisma.BigIntFilter<"bills"> | bigint | number
  meter_reading_id?: Prisma.BigIntFilter<"bills"> | bigint | number
  amount_due?: Prisma.DecimalFilter<"bills"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFilter<"bills"> | Date | string
  is_paid?: Prisma.BoolNullableFilter<"bills"> | boolean | null
  meter_reading?: Prisma.XOR<Prisma.Meter_readingsScalarRelationFilter, Prisma.meter_readingsWhereInput>
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
  payments?: Prisma.PaymentsListRelationFilter
}, "id">

export type billsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  meter_reading_id?: Prisma.SortOrder
  amount_due?: Prisma.SortOrder
  due_date?: Prisma.SortOrder
  is_paid?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.billsCountOrderByAggregateInput
  _avg?: Prisma.billsAvgOrderByAggregateInput
  _max?: Prisma.billsMaxOrderByAggregateInput
  _min?: Prisma.billsMinOrderByAggregateInput
  _sum?: Prisma.billsSumOrderByAggregateInput
}

export type billsScalarWhereWithAggregatesInput = {
  AND?: Prisma.billsScalarWhereWithAggregatesInput | Prisma.billsScalarWhereWithAggregatesInput[]
  OR?: Prisma.billsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.billsScalarWhereWithAggregatesInput | Prisma.billsScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"bills"> | bigint | number
  user_id?: Prisma.BigIntWithAggregatesFilter<"bills"> | bigint | number
  meter_reading_id?: Prisma.BigIntWithAggregatesFilter<"bills"> | bigint | number
  amount_due?: Prisma.DecimalWithAggregatesFilter<"bills"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeWithAggregatesFilter<"bills"> | Date | string
  is_paid?: Prisma.BoolNullableWithAggregatesFilter<"bills"> | boolean | null
}

export type billsCreateInput = {
  id?: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
  meter_reading: Prisma.meter_readingsCreateNestedOneWithoutBillsInput
  user: Prisma.usersCreateNestedOneWithoutBillsInput
  payments?: Prisma.paymentsCreateNestedManyWithoutBillInput
}

export type billsUncheckedCreateInput = {
  id?: bigint | number
  user_id: bigint | number
  meter_reading_id: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
  payments?: Prisma.paymentsUncheckedCreateNestedManyWithoutBillInput
}

export type billsUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  meter_reading?: Prisma.meter_readingsUpdateOneRequiredWithoutBillsNestedInput
  user?: Prisma.usersUpdateOneRequiredWithoutBillsNestedInput
  payments?: Prisma.paymentsUpdateManyWithoutBillNestedInput
}

export type billsUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  meter_reading_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  payments?: Prisma.paymentsUncheckedUpdateManyWithoutBillNestedInput
}

export type billsCreateManyInput = {
  id?: bigint | number
  user_id: bigint | number
  meter_reading_id: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
}

export type billsUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type billsUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  meter_reading_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type BillsListRelationFilter = {
  every?: Prisma.billsWhereInput
  some?: Prisma.billsWhereInput
  none?: Prisma.billsWhereInput
}

export type billsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type billsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  meter_reading_id?: Prisma.SortOrder
  amount_due?: Prisma.SortOrder
  due_date?: Prisma.SortOrder
  is_paid?: Prisma.SortOrder
}

export type billsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  meter_reading_id?: Prisma.SortOrder
  amount_due?: Prisma.SortOrder
}

export type billsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  meter_reading_id?: Prisma.SortOrder
  amount_due?: Prisma.SortOrder
  due_date?: Prisma.SortOrder
  is_paid?: Prisma.SortOrder
}

export type billsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  meter_reading_id?: Prisma.SortOrder
  amount_due?: Prisma.SortOrder
  due_date?: Prisma.SortOrder
  is_paid?: Prisma.SortOrder
}

export type billsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  meter_reading_id?: Prisma.SortOrder
  amount_due?: Prisma.SortOrder
}

export type BillsScalarRelationFilter = {
  is?: Prisma.billsWhereInput
  isNot?: Prisma.billsWhereInput
}

export type billsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutUserInput, Prisma.billsUncheckedCreateWithoutUserInput> | Prisma.billsCreateWithoutUserInput[] | Prisma.billsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutUserInput | Prisma.billsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.billsCreateManyUserInputEnvelope
  connect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
}

export type billsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutUserInput, Prisma.billsUncheckedCreateWithoutUserInput> | Prisma.billsCreateWithoutUserInput[] | Prisma.billsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutUserInput | Prisma.billsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.billsCreateManyUserInputEnvelope
  connect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
}

export type billsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutUserInput, Prisma.billsUncheckedCreateWithoutUserInput> | Prisma.billsCreateWithoutUserInput[] | Prisma.billsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutUserInput | Prisma.billsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.billsUpsertWithWhereUniqueWithoutUserInput | Prisma.billsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.billsCreateManyUserInputEnvelope
  set?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  disconnect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  delete?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  connect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  update?: Prisma.billsUpdateWithWhereUniqueWithoutUserInput | Prisma.billsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.billsUpdateManyWithWhereWithoutUserInput | Prisma.billsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.billsScalarWhereInput | Prisma.billsScalarWhereInput[]
}

export type billsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutUserInput, Prisma.billsUncheckedCreateWithoutUserInput> | Prisma.billsCreateWithoutUserInput[] | Prisma.billsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutUserInput | Prisma.billsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.billsUpsertWithWhereUniqueWithoutUserInput | Prisma.billsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.billsCreateManyUserInputEnvelope
  set?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  disconnect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  delete?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  connect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  update?: Prisma.billsUpdateWithWhereUniqueWithoutUserInput | Prisma.billsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.billsUpdateManyWithWhereWithoutUserInput | Prisma.billsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.billsScalarWhereInput | Prisma.billsScalarWhereInput[]
}

export type billsCreateNestedManyWithoutMeter_readingInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutMeter_readingInput, Prisma.billsUncheckedCreateWithoutMeter_readingInput> | Prisma.billsCreateWithoutMeter_readingInput[] | Prisma.billsUncheckedCreateWithoutMeter_readingInput[]
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutMeter_readingInput | Prisma.billsCreateOrConnectWithoutMeter_readingInput[]
  createMany?: Prisma.billsCreateManyMeter_readingInputEnvelope
  connect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
}

export type billsUncheckedCreateNestedManyWithoutMeter_readingInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutMeter_readingInput, Prisma.billsUncheckedCreateWithoutMeter_readingInput> | Prisma.billsCreateWithoutMeter_readingInput[] | Prisma.billsUncheckedCreateWithoutMeter_readingInput[]
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutMeter_readingInput | Prisma.billsCreateOrConnectWithoutMeter_readingInput[]
  createMany?: Prisma.billsCreateManyMeter_readingInputEnvelope
  connect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
}

export type billsUpdateManyWithoutMeter_readingNestedInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutMeter_readingInput, Prisma.billsUncheckedCreateWithoutMeter_readingInput> | Prisma.billsCreateWithoutMeter_readingInput[] | Prisma.billsUncheckedCreateWithoutMeter_readingInput[]
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutMeter_readingInput | Prisma.billsCreateOrConnectWithoutMeter_readingInput[]
  upsert?: Prisma.billsUpsertWithWhereUniqueWithoutMeter_readingInput | Prisma.billsUpsertWithWhereUniqueWithoutMeter_readingInput[]
  createMany?: Prisma.billsCreateManyMeter_readingInputEnvelope
  set?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  disconnect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  delete?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  connect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  update?: Prisma.billsUpdateWithWhereUniqueWithoutMeter_readingInput | Prisma.billsUpdateWithWhereUniqueWithoutMeter_readingInput[]
  updateMany?: Prisma.billsUpdateManyWithWhereWithoutMeter_readingInput | Prisma.billsUpdateManyWithWhereWithoutMeter_readingInput[]
  deleteMany?: Prisma.billsScalarWhereInput | Prisma.billsScalarWhereInput[]
}

export type billsUncheckedUpdateManyWithoutMeter_readingNestedInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutMeter_readingInput, Prisma.billsUncheckedCreateWithoutMeter_readingInput> | Prisma.billsCreateWithoutMeter_readingInput[] | Prisma.billsUncheckedCreateWithoutMeter_readingInput[]
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutMeter_readingInput | Prisma.billsCreateOrConnectWithoutMeter_readingInput[]
  upsert?: Prisma.billsUpsertWithWhereUniqueWithoutMeter_readingInput | Prisma.billsUpsertWithWhereUniqueWithoutMeter_readingInput[]
  createMany?: Prisma.billsCreateManyMeter_readingInputEnvelope
  set?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  disconnect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  delete?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  connect?: Prisma.billsWhereUniqueInput | Prisma.billsWhereUniqueInput[]
  update?: Prisma.billsUpdateWithWhereUniqueWithoutMeter_readingInput | Prisma.billsUpdateWithWhereUniqueWithoutMeter_readingInput[]
  updateMany?: Prisma.billsUpdateManyWithWhereWithoutMeter_readingInput | Prisma.billsUpdateManyWithWhereWithoutMeter_readingInput[]
  deleteMany?: Prisma.billsScalarWhereInput | Prisma.billsScalarWhereInput[]
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type billsCreateNestedOneWithoutPaymentsInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutPaymentsInput, Prisma.billsUncheckedCreateWithoutPaymentsInput>
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutPaymentsInput
  connect?: Prisma.billsWhereUniqueInput
}

export type billsUpdateOneRequiredWithoutPaymentsNestedInput = {
  create?: Prisma.XOR<Prisma.billsCreateWithoutPaymentsInput, Prisma.billsUncheckedCreateWithoutPaymentsInput>
  connectOrCreate?: Prisma.billsCreateOrConnectWithoutPaymentsInput
  upsert?: Prisma.billsUpsertWithoutPaymentsInput
  connect?: Prisma.billsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.billsUpdateToOneWithWhereWithoutPaymentsInput, Prisma.billsUpdateWithoutPaymentsInput>, Prisma.billsUncheckedUpdateWithoutPaymentsInput>
}

export type billsCreateWithoutUserInput = {
  id?: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
  meter_reading: Prisma.meter_readingsCreateNestedOneWithoutBillsInput
  payments?: Prisma.paymentsCreateNestedManyWithoutBillInput
}

export type billsUncheckedCreateWithoutUserInput = {
  id?: bigint | number
  meter_reading_id: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
  payments?: Prisma.paymentsUncheckedCreateNestedManyWithoutBillInput
}

export type billsCreateOrConnectWithoutUserInput = {
  where: Prisma.billsWhereUniqueInput
  create: Prisma.XOR<Prisma.billsCreateWithoutUserInput, Prisma.billsUncheckedCreateWithoutUserInput>
}

export type billsCreateManyUserInputEnvelope = {
  data: Prisma.billsCreateManyUserInput | Prisma.billsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type billsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.billsWhereUniqueInput
  update: Prisma.XOR<Prisma.billsUpdateWithoutUserInput, Prisma.billsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.billsCreateWithoutUserInput, Prisma.billsUncheckedCreateWithoutUserInput>
}

export type billsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.billsWhereUniqueInput
  data: Prisma.XOR<Prisma.billsUpdateWithoutUserInput, Prisma.billsUncheckedUpdateWithoutUserInput>
}

export type billsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.billsScalarWhereInput
  data: Prisma.XOR<Prisma.billsUpdateManyMutationInput, Prisma.billsUncheckedUpdateManyWithoutUserInput>
}

export type billsScalarWhereInput = {
  AND?: Prisma.billsScalarWhereInput | Prisma.billsScalarWhereInput[]
  OR?: Prisma.billsScalarWhereInput[]
  NOT?: Prisma.billsScalarWhereInput | Prisma.billsScalarWhereInput[]
  id?: Prisma.BigIntFilter<"bills"> | bigint | number
  user_id?: Prisma.BigIntFilter<"bills"> | bigint | number
  meter_reading_id?: Prisma.BigIntFilter<"bills"> | bigint | number
  amount_due?: Prisma.DecimalFilter<"bills"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFilter<"bills"> | Date | string
  is_paid?: Prisma.BoolNullableFilter<"bills"> | boolean | null
}

export type billsCreateWithoutMeter_readingInput = {
  id?: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
  user: Prisma.usersCreateNestedOneWithoutBillsInput
  payments?: Prisma.paymentsCreateNestedManyWithoutBillInput
}

export type billsUncheckedCreateWithoutMeter_readingInput = {
  id?: bigint | number
  user_id: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
  payments?: Prisma.paymentsUncheckedCreateNestedManyWithoutBillInput
}

export type billsCreateOrConnectWithoutMeter_readingInput = {
  where: Prisma.billsWhereUniqueInput
  create: Prisma.XOR<Prisma.billsCreateWithoutMeter_readingInput, Prisma.billsUncheckedCreateWithoutMeter_readingInput>
}

export type billsCreateManyMeter_readingInputEnvelope = {
  data: Prisma.billsCreateManyMeter_readingInput | Prisma.billsCreateManyMeter_readingInput[]
  skipDuplicates?: boolean
}

export type billsUpsertWithWhereUniqueWithoutMeter_readingInput = {
  where: Prisma.billsWhereUniqueInput
  update: Prisma.XOR<Prisma.billsUpdateWithoutMeter_readingInput, Prisma.billsUncheckedUpdateWithoutMeter_readingInput>
  create: Prisma.XOR<Prisma.billsCreateWithoutMeter_readingInput, Prisma.billsUncheckedCreateWithoutMeter_readingInput>
}

export type billsUpdateWithWhereUniqueWithoutMeter_readingInput = {
  where: Prisma.billsWhereUniqueInput
  data: Prisma.XOR<Prisma.billsUpdateWithoutMeter_readingInput, Prisma.billsUncheckedUpdateWithoutMeter_readingInput>
}

export type billsUpdateManyWithWhereWithoutMeter_readingInput = {
  where: Prisma.billsScalarWhereInput
  data: Prisma.XOR<Prisma.billsUpdateManyMutationInput, Prisma.billsUncheckedUpdateManyWithoutMeter_readingInput>
}

export type billsCreateWithoutPaymentsInput = {
  id?: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
  meter_reading: Prisma.meter_readingsCreateNestedOneWithoutBillsInput
  user: Prisma.usersCreateNestedOneWithoutBillsInput
}

export type billsUncheckedCreateWithoutPaymentsInput = {
  id?: bigint | number
  user_id: bigint | number
  meter_reading_id: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
}

export type billsCreateOrConnectWithoutPaymentsInput = {
  where: Prisma.billsWhereUniqueInput
  create: Prisma.XOR<Prisma.billsCreateWithoutPaymentsInput, Prisma.billsUncheckedCreateWithoutPaymentsInput>
}

export type billsUpsertWithoutPaymentsInput = {
  update: Prisma.XOR<Prisma.billsUpdateWithoutPaymentsInput, Prisma.billsUncheckedUpdateWithoutPaymentsInput>
  create: Prisma.XOR<Prisma.billsCreateWithoutPaymentsInput, Prisma.billsUncheckedCreateWithoutPaymentsInput>
  where?: Prisma.billsWhereInput
}

export type billsUpdateToOneWithWhereWithoutPaymentsInput = {
  where?: Prisma.billsWhereInput
  data: Prisma.XOR<Prisma.billsUpdateWithoutPaymentsInput, Prisma.billsUncheckedUpdateWithoutPaymentsInput>
}

export type billsUpdateWithoutPaymentsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  meter_reading?: Prisma.meter_readingsUpdateOneRequiredWithoutBillsNestedInput
  user?: Prisma.usersUpdateOneRequiredWithoutBillsNestedInput
}

export type billsUncheckedUpdateWithoutPaymentsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  meter_reading_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type billsCreateManyUserInput = {
  id?: bigint | number
  meter_reading_id: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
}

export type billsUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  meter_reading?: Prisma.meter_readingsUpdateOneRequiredWithoutBillsNestedInput
  payments?: Prisma.paymentsUpdateManyWithoutBillNestedInput
}

export type billsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  meter_reading_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  payments?: Prisma.paymentsUncheckedUpdateManyWithoutBillNestedInput
}

export type billsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  meter_reading_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type billsCreateManyMeter_readingInput = {
  id?: bigint | number
  user_id: bigint | number
  amount_due: runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date: Date | string
  is_paid?: boolean | null
}

export type billsUpdateWithoutMeter_readingInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  user?: Prisma.usersUpdateOneRequiredWithoutBillsNestedInput
  payments?: Prisma.paymentsUpdateManyWithoutBillNestedInput
}

export type billsUncheckedUpdateWithoutMeter_readingInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  payments?: Prisma.paymentsUncheckedUpdateManyWithoutBillNestedInput
}

export type billsUncheckedUpdateManyWithoutMeter_readingInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  amount_due?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  due_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  is_paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}


/**
 * Count Type BillsCountOutputType
 */

export type BillsCountOutputType = {
  payments: number
}

export type BillsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payments?: boolean | BillsCountOutputTypeCountPaymentsArgs
}

/**
 * BillsCountOutputType without action
 */
export type BillsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BillsCountOutputType
   */
  select?: Prisma.BillsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BillsCountOutputType without action
 */
export type BillsCountOutputTypeCountPaymentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.paymentsWhereInput
}


export type billsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  meter_reading_id?: boolean
  amount_due?: boolean
  due_date?: boolean
  is_paid?: boolean
  meter_reading?: boolean | Prisma.meter_readingsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
  payments?: boolean | Prisma.bills$paymentsArgs<ExtArgs>
  _count?: boolean | Prisma.BillsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bills"]>

export type billsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  meter_reading_id?: boolean
  amount_due?: boolean
  due_date?: boolean
  is_paid?: boolean
  meter_reading?: boolean | Prisma.meter_readingsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bills"]>

export type billsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  meter_reading_id?: boolean
  amount_due?: boolean
  due_date?: boolean
  is_paid?: boolean
  meter_reading?: boolean | Prisma.meter_readingsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bills"]>

export type billsSelectScalar = {
  id?: boolean
  user_id?: boolean
  meter_reading_id?: boolean
  amount_due?: boolean
  due_date?: boolean
  is_paid?: boolean
}

export type billsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "meter_reading_id" | "amount_due" | "due_date" | "is_paid", ExtArgs["result"]["bills"]>
export type billsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meter_reading?: boolean | Prisma.meter_readingsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
  payments?: boolean | Prisma.bills$paymentsArgs<ExtArgs>
  _count?: boolean | Prisma.BillsCountOutputTypeDefaultArgs<ExtArgs>
}
export type billsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meter_reading?: boolean | Prisma.meter_readingsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type billsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meter_reading?: boolean | Prisma.meter_readingsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}

export type $billsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "bills"
  objects: {
    meter_reading: Prisma.$meter_readingsPayload<ExtArgs>
    user: Prisma.$usersPayload<ExtArgs>
    payments: Prisma.$paymentsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    user_id: bigint
    meter_reading_id: bigint
    amount_due: runtime.Decimal
    due_date: Date
    is_paid: boolean | null
  }, ExtArgs["result"]["bills"]>
  composites: {}
}

export type billsGetPayload<S extends boolean | null | undefined | billsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$billsPayload, S>

export type billsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<billsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BillsCountAggregateInputType | true
  }

export interface billsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bills'], meta: { name: 'bills' } }
  /**
   * Find zero or one Bills that matches the filter.
   * @param {billsFindUniqueArgs} args - Arguments to find a Bills
   * @example
   * // Get one Bills
   * const bills = await prisma.bills.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends billsFindUniqueArgs>(args: Prisma.SelectSubset<T, billsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Bills that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {billsFindUniqueOrThrowArgs} args - Arguments to find a Bills
   * @example
   * // Get one Bills
   * const bills = await prisma.bills.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends billsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, billsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Bills that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {billsFindFirstArgs} args - Arguments to find a Bills
   * @example
   * // Get one Bills
   * const bills = await prisma.bills.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends billsFindFirstArgs>(args?: Prisma.SelectSubset<T, billsFindFirstArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Bills that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {billsFindFirstOrThrowArgs} args - Arguments to find a Bills
   * @example
   * // Get one Bills
   * const bills = await prisma.bills.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends billsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, billsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Bills that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {billsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bills
   * const bills = await prisma.bills.findMany()
   * 
   * // Get first 10 Bills
   * const bills = await prisma.bills.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const billsWithIdOnly = await prisma.bills.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends billsFindManyArgs>(args?: Prisma.SelectSubset<T, billsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Bills.
   * @param {billsCreateArgs} args - Arguments to create a Bills.
   * @example
   * // Create one Bills
   * const Bills = await prisma.bills.create({
   *   data: {
   *     // ... data to create a Bills
   *   }
   * })
   * 
   */
  create<T extends billsCreateArgs>(args: Prisma.SelectSubset<T, billsCreateArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Bills.
   * @param {billsCreateManyArgs} args - Arguments to create many Bills.
   * @example
   * // Create many Bills
   * const bills = await prisma.bills.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends billsCreateManyArgs>(args?: Prisma.SelectSubset<T, billsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Bills and returns the data saved in the database.
   * @param {billsCreateManyAndReturnArgs} args - Arguments to create many Bills.
   * @example
   * // Create many Bills
   * const bills = await prisma.bills.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Bills and only return the `id`
   * const billsWithIdOnly = await prisma.bills.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends billsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, billsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Bills.
   * @param {billsDeleteArgs} args - Arguments to delete one Bills.
   * @example
   * // Delete one Bills
   * const Bills = await prisma.bills.delete({
   *   where: {
   *     // ... filter to delete one Bills
   *   }
   * })
   * 
   */
  delete<T extends billsDeleteArgs>(args: Prisma.SelectSubset<T, billsDeleteArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Bills.
   * @param {billsUpdateArgs} args - Arguments to update one Bills.
   * @example
   * // Update one Bills
   * const bills = await prisma.bills.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends billsUpdateArgs>(args: Prisma.SelectSubset<T, billsUpdateArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Bills.
   * @param {billsDeleteManyArgs} args - Arguments to filter Bills to delete.
   * @example
   * // Delete a few Bills
   * const { count } = await prisma.bills.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends billsDeleteManyArgs>(args?: Prisma.SelectSubset<T, billsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {billsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bills
   * const bills = await prisma.bills.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends billsUpdateManyArgs>(args: Prisma.SelectSubset<T, billsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bills and returns the data updated in the database.
   * @param {billsUpdateManyAndReturnArgs} args - Arguments to update many Bills.
   * @example
   * // Update many Bills
   * const bills = await prisma.bills.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Bills and only return the `id`
   * const billsWithIdOnly = await prisma.bills.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends billsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, billsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Bills.
   * @param {billsUpsertArgs} args - Arguments to update or create a Bills.
   * @example
   * // Update or create a Bills
   * const bills = await prisma.bills.upsert({
   *   create: {
   *     // ... data to create a Bills
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Bills we want to update
   *   }
   * })
   */
  upsert<T extends billsUpsertArgs>(args: Prisma.SelectSubset<T, billsUpsertArgs<ExtArgs>>): Prisma.Prisma__billsClient<runtime.Types.Result.GetResult<Prisma.$billsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Bills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {billsCountArgs} args - Arguments to filter Bills to count.
   * @example
   * // Count the number of Bills
   * const count = await prisma.bills.count({
   *   where: {
   *     // ... the filter for the Bills we want to count
   *   }
   * })
  **/
  count<T extends billsCountArgs>(
    args?: Prisma.Subset<T, billsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BillsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Bills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BillsAggregateArgs>(args: Prisma.Subset<T, BillsAggregateArgs>): Prisma.PrismaPromise<GetBillsAggregateType<T>>

  /**
   * Group by Bills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {billsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends billsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: billsGroupByArgs['orderBy'] }
      : { orderBy?: billsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, billsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the bills model
 */
readonly fields: billsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for bills.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__billsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  meter_reading<T extends Prisma.meter_readingsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.meter_readingsDefaultArgs<ExtArgs>>): Prisma.Prisma__meter_readingsClient<runtime.Types.Result.GetResult<Prisma.$meter_readingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.usersDefaultArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  payments<T extends Prisma.bills$paymentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.bills$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the bills model
 */
export interface billsFieldRefs {
  readonly id: Prisma.FieldRef<"bills", 'BigInt'>
  readonly user_id: Prisma.FieldRef<"bills", 'BigInt'>
  readonly meter_reading_id: Prisma.FieldRef<"bills", 'BigInt'>
  readonly amount_due: Prisma.FieldRef<"bills", 'Decimal'>
  readonly due_date: Prisma.FieldRef<"bills", 'DateTime'>
  readonly is_paid: Prisma.FieldRef<"bills", 'Boolean'>
}
    

// Custom InputTypes
/**
 * bills findUnique
 */
export type billsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * Filter, which bills to fetch.
   */
  where: Prisma.billsWhereUniqueInput
}

/**
 * bills findUniqueOrThrow
 */
export type billsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * Filter, which bills to fetch.
   */
  where: Prisma.billsWhereUniqueInput
}

/**
 * bills findFirst
 */
export type billsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * Filter, which bills to fetch.
   */
  where?: Prisma.billsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bills to fetch.
   */
  orderBy?: Prisma.billsOrderByWithRelationInput | Prisma.billsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for bills.
   */
  cursor?: Prisma.billsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of bills.
   */
  distinct?: Prisma.BillsScalarFieldEnum | Prisma.BillsScalarFieldEnum[]
}

/**
 * bills findFirstOrThrow
 */
export type billsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * Filter, which bills to fetch.
   */
  where?: Prisma.billsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bills to fetch.
   */
  orderBy?: Prisma.billsOrderByWithRelationInput | Prisma.billsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for bills.
   */
  cursor?: Prisma.billsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of bills.
   */
  distinct?: Prisma.BillsScalarFieldEnum | Prisma.BillsScalarFieldEnum[]
}

/**
 * bills findMany
 */
export type billsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * Filter, which bills to fetch.
   */
  where?: Prisma.billsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bills to fetch.
   */
  orderBy?: Prisma.billsOrderByWithRelationInput | Prisma.billsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing bills.
   */
  cursor?: Prisma.billsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bills.
   */
  skip?: number
  distinct?: Prisma.BillsScalarFieldEnum | Prisma.BillsScalarFieldEnum[]
}

/**
 * bills create
 */
export type billsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * The data needed to create a bills.
   */
  data: Prisma.XOR<Prisma.billsCreateInput, Prisma.billsUncheckedCreateInput>
}

/**
 * bills createMany
 */
export type billsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many bills.
   */
  data: Prisma.billsCreateManyInput | Prisma.billsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * bills createManyAndReturn
 */
export type billsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * The data used to create many bills.
   */
  data: Prisma.billsCreateManyInput | Prisma.billsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * bills update
 */
export type billsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * The data needed to update a bills.
   */
  data: Prisma.XOR<Prisma.billsUpdateInput, Prisma.billsUncheckedUpdateInput>
  /**
   * Choose, which bills to update.
   */
  where: Prisma.billsWhereUniqueInput
}

/**
 * bills updateMany
 */
export type billsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update bills.
   */
  data: Prisma.XOR<Prisma.billsUpdateManyMutationInput, Prisma.billsUncheckedUpdateManyInput>
  /**
   * Filter which bills to update
   */
  where?: Prisma.billsWhereInput
  /**
   * Limit how many bills to update.
   */
  limit?: number
}

/**
 * bills updateManyAndReturn
 */
export type billsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * The data used to update bills.
   */
  data: Prisma.XOR<Prisma.billsUpdateManyMutationInput, Prisma.billsUncheckedUpdateManyInput>
  /**
   * Filter which bills to update
   */
  where?: Prisma.billsWhereInput
  /**
   * Limit how many bills to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * bills upsert
 */
export type billsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * The filter to search for the bills to update in case it exists.
   */
  where: Prisma.billsWhereUniqueInput
  /**
   * In case the bills found by the `where` argument doesn't exist, create a new bills with this data.
   */
  create: Prisma.XOR<Prisma.billsCreateInput, Prisma.billsUncheckedCreateInput>
  /**
   * In case the bills was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.billsUpdateInput, Prisma.billsUncheckedUpdateInput>
}

/**
 * bills delete
 */
export type billsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
  /**
   * Filter which bills to delete.
   */
  where: Prisma.billsWhereUniqueInput
}

/**
 * bills deleteMany
 */
export type billsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which bills to delete
   */
  where?: Prisma.billsWhereInput
  /**
   * Limit how many bills to delete.
   */
  limit?: number
}

/**
 * bills.payments
 */
export type bills$paymentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  where?: Prisma.paymentsWhereInput
  orderBy?: Prisma.paymentsOrderByWithRelationInput | Prisma.paymentsOrderByWithRelationInput[]
  cursor?: Prisma.paymentsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PaymentsScalarFieldEnum | Prisma.PaymentsScalarFieldEnum[]
}

/**
 * bills without action
 */
export type billsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bills
   */
  select?: Prisma.billsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bills
   */
  omit?: Prisma.billsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.billsInclude<ExtArgs> | null
}
